//var PI: float32 = 3.141592653589793;
var SOLAR_MASS: float32 = 4.0 * PI * PI;
var DAYS_PER_YEAR: float32 = 365.24;

class Body {
    public x: float32;
    public y: float32;
    public z: float32;
    public vx: float32;
    public vy: float32;
    public vz: float32;
    public mass: float32;

    constructor(
        x: float32,
        y: float32,
        z: float32,
        vx: float32,
        vy: float32,
        vz: float32,
        mass: float32
    ) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.vx = vx;
        this.vy = vy;
        this.vz = vz;
        this.mass = mass;
    }

    offsetMomentum(px: float32, py: float32, pz: float32): Body {
        this.vx = -(px / SOLAR_MASS);
        this.vy = -(py / SOLAR_MASS);
        this.vz = -(pz / SOLAR_MASS);
        return this;
    }
}

function Jupiter(): Body {
    return new Body(
        4.84143144246472090,
        -1.16032004402742839,
        -0.103622044471123109,
        0.00166007664274403694 * DAYS_PER_YEAR,
        0.00769901118419740425 * DAYS_PER_YEAR,
        -0.0000690460016972063 * DAYS_PER_YEAR,
        0.00095479193842432661 * SOLAR_MASS
    );
}

function Saturn(): Body {
    return new Body(
        8.34336671824457987,
        4.12479856412430479,
        -0.403523417114321381,
        -0.002767425107268624 * DAYS_PER_YEAR,
        0.0049985280123491724 * DAYS_PER_YEAR,
        0.0000230417297573764 * DAYS_PER_YEAR,
        0.0002858859806661308 * SOLAR_MASS
    );
}

function Uranus(): Body {
    return new Body(
        12.8943695621391310,
        -15.1111514016986312,
        -0.223307578892655734,
        0.0029646013756476162 * DAYS_PER_YEAR,
        0.0023784717395948095 * DAYS_PER_YEAR,
        -0.000029658956854024 * DAYS_PER_YEAR,
        0.0000436624404335156 * SOLAR_MASS
    );
}

function Neptune(): Body {
    return new Body(
        15.3796971148509165,
        -25.9193146099879641,
        0.179258772950371181,
        0.002680677724903893 * DAYS_PER_YEAR,
        0.001628241700382423 * DAYS_PER_YEAR,
        -0.000095159225451972 * DAYS_PER_YEAR,
        0.0000515138902046612 * SOLAR_MASS
    );
}

function Sun(): Body {
    return new Body(
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SOLAR_MASS
    );
}

class NBodySystem {
    public bodies: Array< Body >;
    constructor(){

    }
    init(bodies: Array< Body >):Body {
        var px: float32 = 0.0;
        var py: float32 = 0.0;
        var pz: float32 = 0.0;
        var size: uint32 = bodies.length;
        var i: uint32 = 0;

        while (i < size) {
            var b: Body    = bodies[i];
            var m: float32 = b.mass;
            px = px + b.vx * m;
            py = py + b.vy * m;
            pz = pz + b.vz * m;
            i = i + 1;
        }
        this.bodies = bodies;
        return this.bodies[0].offsetMomentum(px, py, pz);
    }

    advance(dt: float32): void {
        var dx: float32,
            dy: float32,
            dz: float32,
            ix: float32,
            iy: float32,
            iz: float32,
            bivx: float32,
            bivy: float32,
            bivz: float32,
            distance: float32,
            mag: float32;

        var bodies: Array< Body > = this.bodies;
        var size: uint32 = bodies.length;
        var i: uint32 = 0;
        while (i < size) {
            var bodyi: Body = bodies[i];

            ix = bodyi.x;
            iy = bodyi.y;
            iz = bodyi.z;

            bivx = bodyi.vx;
            bivy = bodyi.vy;
            bivz = bodyi.vz;

            var bodyim: float32 = bodyi.mass;
            var j: uint32 = i + 1;

            while (j < size) {
                var bodyj: Body = bodies[j];
                dx = ix - bodyj.x;
                dy = iy - bodyj.y;
                dz = iz - bodyj.z;

                var distanceSq = dx * dx + dy * dy + dz * dz;
                distance = sqrt32(distanceSq);
                mag = dt / (distanceSq * distance);

                var bim = bodyim * mag;
                var bjm = bodyj.mass * mag;

                bivx = bivx - dx * bjm;
                bivy = bivy - dy * bjm;
                bivz = bivz - dz * bjm;

                bodyj.vx = bodyj.vx + dx * bim;
                bodyj.vy = bodyj.vy + dy * bim;
                bodyj.vz = bodyj.vz + dz * bim;

                j= j + 1;
            }

            bodyi.vx = bivx;
            bodyi.vy = bivy;
            bodyi.vz = bivz;

            bodyi.x = bodyi.x + dt * bivx;
            bodyi.y = bodyi.y + dt * bivy;
            bodyi.z = bodyi.z + dt * bivz;

            i = i + 1;
        }
    }

    energy(): float32 {
        var dx: float32, dy: float32, dz: float32, distance: float32;
        var ix: float32, iy: float32, iz: float32, vx: float32, vy: float32, vz: float32, bim: float32;
        var e : float32 = 0.0;
        var bodies: Array< Body > = this.bodies;
        var size: uint32 = bodies.length;
        var i: uint32 = 0;

        while (i < size) {
            var bodyi: Body = bodies[i];

            ix = bodyi.x;
            iy = bodyi.y;
            iz = bodyi.z;

            vx = bodyi.vx;
            vy = bodyi.vy;
            vz = bodyi.vz;

            bim = bodyi.mass;

            e = e + 0.5 * bim * (vx * vx + vy * vy + vz * vz);
            var j: uint32 = i + 1;

            while (j < size) {
                var bodyj: Body = bodies[j];
                dx = ix - bodyj.x;
                dy = iy - bodyj.y;
                dz = iz - bodyj.z;

                distance = sqrt32(dx * dx + dy * dy + dz * dz);
                e = e - bim * bodyj.mass / distance;
                j= j + 1;
            }
            i = i + 1;
        }
        return e;
    }
}

export function test(n: uint32): float32 {
    let array = new Array< Body >(5);

    array[0] = Sun();
    array[1] = Jupiter();
    array[2] = Saturn();
    array[3] = Uranus();
    array[4] = Neptune();

    var bodies: NBodySystem = new NBodySystem();
    bodies.init(array);
    var i: uint32 = 0;

    while (i < n) {
        bodies.advance(0.01);
        i = i + 1;
    }
    return bodies.energy();
}

/*
var n: uint32 = 500000;

console.time('t');
var bodies: NBodySystem = new NBodySystem(new Array< Body >(Sun(), Jupiter(), Saturn(), Uranus(), Neptune()));

console.log(bodies.energy().toFixed(9));
for (var i: uint32 = 0; i < n; i = i + 1;) {
    bodies.advance(0.01);
}
console.log(bodies.energy().toFixed(9));

// -0.169075164
// -0.169096567

console.timeEnd('t');
*/
