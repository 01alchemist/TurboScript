// #if WASM

  // These will be filled in by the WebAssembly code generator
  unsafe var currentHeapPointer: *uint8 = null;
  unsafe var originalHeapPointer: *uint8 = null;

  export unsafe function malloc(sizeOf: uint32): *uint8 {
    // Align all allocations to 8 bytes
    var offset = ((currentHeapPointer as uint32 + 7) & ~7 as uint32) as *uint8;
    sizeOf = (sizeOf + 7) & ~7 as uint32;

    // Use a simple bump allocator for now
    var limit = offset + sizeOf;
    currentHeapPointer = limit;

    // Make sure the memory starts off at zero
    var ptr = offset;
    while (ptr < limit) {
      *(ptr as *int32) = 0;
      ptr = ptr + 4;
    }

    return offset;
  }

  unsafe function memcpy(target: *uint8, source: *uint8, length: uint32): void {
    // No-op if either of the inputs are null
    if (source == null || target == null) {
      return;
    }

    // Optimized aligned copy
    if (length >= 16 && (source as uint32) % 4 == (target as uint32) % 4) {
      // Pick off the beginning
      while ((target as uint32) % 4 != 0) {
        *target = *source;
        target = target + 1;
        source = source + 1;
        length = length - 1;
      }

      // Pick off the end
      while (length % 4 != 0) {
        length = length - 1;
        *(target + length) = *(source + length);
      }

      // Zip over the middle
      var end = target + length;
      while (target < end) {
        *(target as *int32) = *(source as *int32);
        target = target + 4;
        source = source + 4;
      }
    }

    // Slow unaligned copy
    else {
      var end = target + length;
      while (target < end) {
        *target = *source;
        target = target + 1;
        source = source + 1;
      }
    }
  }

  unsafe function memcmp(a: *uint8, b: *uint8, length: uint32): int32 {
    // No-op if either of the inputs are null
    if (a == null || b == null) {
      return 0;
    }

    // Return the first non-zero difference
    while (length > 0) {
      var delta = *a as int32 - *b as int32;
      if (delta != 0) {
        return delta;
      }
      a = a + 1;
      b = b + 1;
      length = length - 1;
    }

    // Both inputs are identical
    return 0;
  }

// #elif C
//
//   declare unsafe function malloc(sizeOf: uint32): *uint8;
//   declare unsafe function memcpy(target: *uint8, source: *uint8, length: uint32): void;
//   declare unsafe function memcmp(a: *uint8, b: *uint8, length: uint32): int32;
//
// #endif
//
// #if WASM || C

  function internalIntToString(value: uint32, sign: boolean): string {
    // Avoid allocation for common cases
    if (value == 0) return "0";
    if (value == 1) return sign ? "-1" : "1";

    unsafe {
      // Determine how many digits we need
      var length = ((sign ? 1 : 0) + (
        value >= 100000000 ?
          value >= 1000000000 ? 10 : 9 :
        value >= 10000 ?
          value >= 1000000 ?
            value >= 10000000 ? 8 : 7 :
            value >= 100000 ? 6 : 5 :
          value >= 100 ?
            value >= 1000 ? 4 : 3 :
            value >= 10 ? 2 : 1)) as uint32;

      var ptr = string_new(length) as *uint8;
      var end = ptr + 4 + length * 2;

      if (sign) {
        *((ptr + 4) as *uint16) = '-';
      }

      while (value != 0) {
        end = end + -2;
        *(end as *uint16) = (value % 10 + '0') as uint16;
        value = value / 10;
      }

      return ptr as string;
    }
  }

  export function string_new(length: uint32): string {
    unsafe {
      var ptr = malloc(4 + length * 2);
      *(ptr as *uint32) = length;
      return ptr as string;
    }
  }
// #endif
//
// #if C
//
//   export unsafe function cstring_to_utf16(utf8: *uint8): string {
//     if (utf8 == null) {
//       return null;
//     }
//
//     var utf16_length: uint32 = 0;
//     var a: uint8, b: uint8, c: uint8, d: uint8;
//
//     // Measure text
//     var i: uint32 = 0;
//     while ((a = *(utf8 + i)) != '\\0') {
//       i = i + 1;
//       var codePoint: uint32;
//
//       // Decode UTF-8
//       if ((b = *(utf8 + i)) != '\\0' && a >= 0xC0) {
//         i = i + 1;
//         if ((c = *(utf8 + i)) != '\\0' && a >= 0xE0) {
//           i = i + 1;
//           if ((d = *(utf8 + i)) != '\\0' && a >= 0xF0) {
//             i = i + 1;
//             codePoint = ((a & 0x07) << 18) | ((b & 0x3F) << 12) | ((c & 0x3F) << 6) | (d & 0x3F);
//           } else {
//             codePoint = ((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F);
//           }
//         } else {
//           codePoint = ((a & 0x1F) << 6) | (b & 0x3F);
//         }
//       } else {
//         codePoint = a;
//       }
//
//       // Encode UTF-16
//       utf16_length = utf16_length + (codePoint < 0x10000 ? 1 : 2) as uint32;
//     }
//
//     var output = string_new(utf16_length);
//     var utf16 = output as *uint16 + 2;
//
//     // Convert text
//     i = 0;
//     while ((a = *(utf8 + i)) != '\\0') {
//       i = i + 1;
//       var codePoint: uint32;
//
//       // Decode UTF-8
//       if ((b = *(utf8 + i)) != '\\0' && a >= 0xC0) {
//         i = i + 1;
//         if ((c = *(utf8 + i)) != '\\0' && a >= 0xE0) {
//           i = i + 1;
//           if ((d = *(utf8 + i)) != '\\0' && a >= 0xF0) {
//             i = i + 1;
//             codePoint = ((a & 0x07) << 18) | ((b & 0x3F) << 12) | ((c & 0x3F) << 6) | (d & 0x3F);
//           } else {
//             codePoint = ((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F);
//           }
//         } else {
//           codePoint = ((a & 0x1F) << 6) | (b & 0x3F);
//         }
//       } else {
//         codePoint = a;
//       }
//
//       // Encode UTF-16
//       if (codePoint < 0x10000) {
//         *utf16 = codePoint as uint16;
//       } else {
//         *utf16 = ((codePoint >> 10) + (0xD800 - (0x10000 >> 10))) as uint16;
//         utf16 = utf16 + 1;
//         *utf16 = ((codePoint & 0x3FF) + 0xDC00) as uint16;
//       }
//       utf16 = utf16 + 1;
//     }
//
//     return output;
//   }
//
//   export unsafe function utf16_to_cstring(input: string): *uint8 {
//     if (input as *uint32 == null) {
//       return null;
//     }
//
//     var utf16_length = *(input as *uint32);
//     var utf8_length: uint32 = 0;
//     var utf16 = input as *uint16 + 2;
//
//     // Measure text
//     var i: uint32 = 0;
//     while (i < utf16_length) {
//       var codePoint: uint32;
//
//       // Decode UTF-16
//       var a = *(utf16 + i);
//       i = i + 1;
//       if (i < utf16_length && a >= 0xD800 && a <= 0xDBFF) {
//         var b = *(utf16 + i);
//         i = i + 1;
//         codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00) as uint32;
//       } else {
//         codePoint = a;
//       }
//
//       // Encode UTF-8
//       utf8_length = utf8_length + (
//         codePoint < 0x80 ? 1 :
//         codePoint < 0x800 ? 2 :
//         codePoint < 0x10000 ? 3 :
//         4) as uint32;
//     }
//
//     var utf8 = malloc(utf8_length + 1);
//     var next = utf8;
//
//     // Convert text
//     i = 0;
//     while (i < utf16_length) {
//       var codePoint: uint32;
//
//       // Decode UTF-16
//       var a = *(utf16 + i);
//       i = i + 1;
//       if (i < utf16_length && a >= 0xD800 && a <= 0xDBFF) {
//         var b = *(utf16 + i);
//         i = i + 1;
//         codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00) as uint32;
//       } else {
//         codePoint = a;
//       }
//
//       // Encode UTF-8
//       if (codePoint < 0x80) {
//         *next = codePoint as uint8;
//       } else {
//         if (codePoint < 0x800) {
//           *next = (((codePoint >> 6) & 0x1F) | 0xC0) as uint8;
//         } else {
//           if (codePoint < 0x10000) {
//             *next = (((codePoint >> 12) & 0x0F) | 0xE0) as uint8;
//           } else {
//             *next = (((codePoint >> 18) & 0x07) | 0xF0) as uint8;
//             next = next + 1;
//             *next = (((codePoint >> 12) & 0x3F) | 0x80) as uint8;
//           }
//           next = next + 1;
//           *next = (((codePoint >> 6) & 0x3F) | 0x80) as uint8;
//         }
//         next = next + 1;
//         *next = ((codePoint & 0x3F) | 0x80) as uint8;
//       }
//       next = next + 1;
//     }
//
//     // C strings are null-terminated
//     *next = '\\0';
//
//     return utf8;
//   }
//
// #endif