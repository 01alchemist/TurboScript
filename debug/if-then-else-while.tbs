unsafe function memcpy(target: *uint8, source: *uint8, length: uint32): void {
    // No-op if either of the inputs are null
    // if (source == null || target == null) {
    //   return;
    // }

    // Optimized aligned copy
    if (length >= 16 && (source as uint32) % 4 == (target as uint32) % 4) {
      // Pick off the beginning
      while ((target as uint32) % 4 != 0) {
        *target = *source;
        target = target + 1;
        source = source + 1;
        length = length - 1;
      }

      // Pick off the end
      while (length % 4 != 0) {
        length = length - 1;
        *(target + length) = *(source + length);
      }

      // Zip over the middle
      var end = target + length;
      while (target < end) {
        *(target as *int32) = *(source as *int32);
        target = target + 4;
        source = source + 4;
      }
    }

    // Slow unaligned copy
    // else {
    //   var end = target + length;
    //   while (target < end) {
    //     *target = *source;
    //     target = target + 1;
    //     source = source + 1;
    //   }
    // }
}