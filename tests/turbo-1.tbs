declare function log(v: string): void;
//declare function unsafe():void;

export class Vector3{
    x: float32;
    y: float32;
    z: float32;

    constructor(x: float32 = 0, y:float32 = 0, z:float32 = 0): void {
        this.y = y;
        this.x = x;
        this.z = z;
    }

    add(b:Vector3):Vector3{
        let a:float32 = 0.0;
        let c = new Vector3(a,a,a);
        c.x = this.x + b.x;
        c.y = this.y + b.y;
        c.z = this.z + b.z;
        return c;
    }
}

@unsafe
export class Base {

    @virtual
    add(b:Vec3):Vector3 {
        return null;
    }
}

@unsafe
export class Vec3 extends Base{

    x: float32;
    y: float32;
    z: float32;

    constructor(x: float32 = 0, y:float32 = 0, z:float32 = 0): void {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    @virtual
    add(b:Vec3):Vector3 {
        let c = new Vector3();
        c.x = this.x + b.x;
        c.y = this.y + b.y;
        c.z = this.z + b.z;
        return c;
    }

    add_vec3(b:Vector3):Vector3 {
        let c = new Vector3();
        c.x = this.x + b.x;
        c.y = this.y + b.y;
        c.z = this.z + b.z;
        return c;
    }

    toString():string {
        let x = this.x;
        let y = this.y;
        return `{"x":${x},"y":${y}}`;
    }
}

// enum ShapeType{
//
// }

@unsafe
export class Shape {
    v1:Vec3;

    constructor(v1:Vec3):void {
        this.v1 = v1 == null? new Vec3() : v1;
    }
}

@unsafe
export class Triangle {
    v1:Vec3;

    constructor(v1:Vec3):void {
        this.v1 = v1 == null? new Vec3() : v1;
    }

    normal():Vector3{
        let b = new Vec3();
        let c = this.v1.add(b);
        return c;
    }

    toString():string {
        let str = this.v1.toString();
        return `{"v1":${str}}`;
    }
}

// @unsafe
// export class Mesh {
//     triangles:Triangle[];

//     constructor(data:Triangle[]):void {
//         this.triangles = data;
//     }

//     normal():void{
//         log(this.triangles as string);
//     }
// }