@import
declare class log{
    static printI32(v:int32):void;
    static printF32(v:float32):void;
    static printF64(v:float64):void;
}

export class Data {

    id: int32;

    v1: float64;
    v2: float64;
    v3: float64;

    constructor(id: int32) {
        this.id = id;
    }

    set(v1: float64, v2: float64, v3: float64): void {
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
}

let a: Array<Data> = null;

export function test(num: int32): Array<Data> {
    // log.printI32(num);
    a = new Array<Data>(num);
    // log.printI32(sizeof(Data));
    log.printI32(a as int32);
    let i: int32 = 0;
    while (i < num) {
        let d = new Data(i);
        // log.printI32(d as int32);
        // d.set(0.5, 0.5, 0.5);
        a[i] = d;
        i = i + 1;
        // log.printI32(i);
    }
    return a;
}
let b:Array<Data>;
export function test3(num: int32): Array<Data> {
    // log.printI32(num);
    b = new Array<Data>(1);
    // log.printI32(sizeof(Data));
    // b = 64;
    log.printI32(b as int32);
    return b;
}

export function test2(num: int32): Array<Data> {
    let b = new Array<Data>(num);
    let i: int32 = 0;
    while (i < num) {
        let d = new Data(i);
        d.set(0.5, 0.5, 0.5);
        b[i] = d;
        i = i + 1;
    }
    return b;
}

export function getArrayByteLength(value: Array<Data>): int32 {
    return value.bytesLength;
}
export function getArrayElementSize(value: Array<Data>): int32 {
    return value.elementSize;
}

export function getArray(): Array<Data> {
    return a;
}
export function getData(index: int32): Data {
    return a[index];
}
export function getData2(arr:Array<Data>, index: int32): Data {
    return arr[index];
}

// @JS
// anyfunc function data_to_json(data:data) {
//     return {
//         v1:data.v1,
//         v2:data.v2,
//         v3:data.v3
//     };
// }
