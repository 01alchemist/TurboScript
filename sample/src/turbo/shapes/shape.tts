export interface Hit{
    Shape:number;
}
export interface Ray{

}

export enum ShapeType{
	UNKNOWN,
	PLANE,
	CUBE,
	SPHERE,
	TRIANGLE,
	MESH,
    Volume,
    SDFShape
}

@turbo class Shape{

    shapeId:uint32

	@method init(SELF:number, id):number{
        SELF.shapeId = id;
		return SELF;
	}

	@virtual Type(SELF:number){
		throw ShapeType.UNKNOWN;
	}

	@virtual ToJSON(SELF:number){
		throw "Pure: Shape.ToJSON()";
	}

	@virtual Compile(SELF:number, c?:number){
		throw "Pure: Shape.Compile()";
	}

	@virtual BoundingBox(SELF:number, c?:number):number{
		throw "Pure: Shape.BoundingBox()";
	}

	@virtual Intersect(SELF:number, ray:Ray, c?:number):Hit{
		throw "Pure: Shape.Intersect()";
	}

	@virtual UV(SELF:number, p:Vector3, c?:number):number{
		throw "Pure: Shape.UV()";
	}

	@virtual NormalAt(SELF:number, p:Vector3, c?:number):number{
		throw "Pure: Shape.NormalAt()";
	}

	@virtual MaterialAt(SELF:number, p:Vector3, c?:number):number{
		throw "Pure: Shape.MaterialAt()";
	}

} @end

@turbo class TransformedShape extends Shape{

	Box:Box
	Shape:Shape
	Matrix:Matrix
	Inverse:Matrix
	Transpose:Matrix

	@method init(SELF, shape:number, matrix){
        SELF.Shape = shape;
		SELF.Matrix = matrix;
		SELF.Inverse = Matrix.Inverse(matrix);
		SELF.Transpose = Matrix.Transpose(SELF.Inverse);
		return SELF;
	}

	static NewTransformedShape(s:number, m:number):number {
		return TransformedShape.init(@new TransformedShape, s, m);
	}

	@virtual BoundingBox(SELF) {
        if(!SELF.Box){
            SELF.Box = Matrix.MulBox(SELF.Matrix, Shape.BoundingBox(SELF.Shape));
        }
        return SELF.Box;
	}

    @virtual Intersect(SELF, r:Ray):Hit {

        let invMat = SELF.Inverse;
		let shapeRay:Ray = Matrix.MulRay(invMat, r);
		let hit = Shape.Intersect(SELF.Shape, shapeRay);
		if (!hit.Ok()) {
			return hit;
		}
        let transMat = SELF.Transpose;
		let shape:number = hit.Shape;
		let shapePosition:Vector3 = shapeRay.position(hit.T);
		let shapeNormal:Vector3 = Shape.NormalAt(shape, shapePosition);
		let position:Vector3 = Matrix.MulPosition_vec3(SELF.Matrix, shapePosition);
		let normal:Vector3 = Matrix.MulDirection_vec3(transMat, shapeNormal);
		let material = Material.MaterialAt(shape, shapePosition);
		let inside = false;
		if (shapeNormal.dot(shapeRay.direction) > 0) {
            normal = normal.negate();
			inside = true;
		}
		let ray:number = new Ray(position, normal);
		let info = new HitInfo(shape, position, normal, ray, material, inside);
		hit.T = position.sub(r.origin).length();
		hit.HitInfo = info;
		return hit;
	}
    @virtual Type(SELF){
        return Shape.Type(SELF.Shape);
    }

    @virtual ToJSON(SELF){
    	let json = Shape.ToJSON(SELF.Shape);
        json.box = Box.ToJSON(TransformedShape.BoundingBox(SELF));
        return json;
    }

    @virtual Compile(SELF, c?:number){
        return Shape.Compile(SELF.Shape, c);
    }

    @virtual UV(SELF:number, p:Vector3, c?:number):number{
        return Shape.UV(SELF.Shape, p, c);
    }

    @virtual NormalAt(SELF:number, p:Vector3, c?:number):number{
        return Shape.NormalAt(SELF.Shape, p, c);
    }

    @virtual MaterialAt(SELF:number, p:Vector3, c?:number):number{
        return Shape.MaterialAt(SELF.Shape, p, c);
    }
} @end