@turbo class Cube extends Shape{
	Min:Vector
	Max:Vector
	Material:Material
	Box:Box

	@method init(SELF, min, max, material, box){
        SELF.Min = min;
        SELF.Max = max;
        SELF.Material = material;
        SELF.Box = box;
        return SELF;
    }
    static NewCube(min, max, material):number {
        let box = Box.Init_mem(@new  Box, min, max);
        return Cube.init(@new Cube, min, max, material, box);
    }

    @virtual Type(SELF:number){
        throw ShapeType.CUBE;
    }

    @virtual ToJSON(SELF){
        return {
            min:Vector.ToJSON(SELF.Min),
            max:Vector.ToJSON(SELF.Max),
            material:Material.ToJSON(SELF.Material),
            box:Box.ToJSON(SELF.Box),
        }
    }

    @virtual Compile(SELF){
    }

    @virtual BoundingBox(SELF):number {
        return SELF.Box;
    }

    @virtual Intersect(SELF, r:Ray):Hit {
        let min = new Vector3().read(SELF.Min);
        let max = new Vector3().read(SELF.Max);

        let n:Vector3 = min.sub(r.origin).div(r.direction);
        let f:Vector3 = max.sub(r.origin).div(r.direction);
        let _n = n.min(f);
        let _f = n.max(f);
        let t0 = Math.max(Math.max(_n.x, _n.y), _n.z);
        let t1 = Math.min(Math.min(_f.x, _f.y), _f.z);
        min = null;
        max = null;
        if (t0 > 0 && t0 < t1) {
            return new Hit(SELF, t0, null)
        }
        return Hit.NoHit;
    }

    @virtual UV(SELF, p:Vector3):Vector3 {
        let min = new Vector3().read(SELF.Min);
        let max = new Vector3().read(SELF.Max);
        let uv = p.sub(min).div(max.sub(min));
        min = null;
        max = null;
        return new Vector3(uv.x, uv.z, 0);
    }

    @virtual MaterialAt(SELF, p:Vector3):number {
        return SELF.Material;
    }

    @virtual NormalAt(SELF, p:Vector3):Vector3 {

        let min = new Vector3().read(SELF.Min);
        let max = new Vector3().read(SELF.Max);

        if(p.x < min.x + EPS){
            return new Vector3(-1, 0, 0);
        }else if(p.x > max.x - EPS){
            return new Vector3(1, 0, 0);
        }else if (p.y < min.y + EPS){
            return new Vector3(0, -1, 0)
        }else if(p.y > max.y - EPS){
            return new Vector3(0, 1, 0);
        }else if(p.z < min.z + EPS){
            return new Vector3(0, 0, -1);
        }else if(p.z > max.z - EPS){
            return new Vector3(0, 0, 1);
        }
        min = null;
        max = null;
        return new Vector3(0, 1, 0);
    }

    static Mesh(SELF):number {
        let a = SELF.Min;
        let b = SELF.Max;
        let z = Vector.NewVector();
        let m = SELF.Material;
        let v000 = Vector.NewVector(Vector.x(a), Vector.y(a), Vector.z(a));
        let v001 = Vector.NewVector(Vector.x(a), Vector.y(a), Vector.z(b));
        let v010 = Vector.NewVector(Vector.x(a), Vector.y(b), Vector.z(a));
        let v011 = Vector.NewVector(Vector.x(a), Vector.y(b), Vector.z(b));
        let v100 = Vector.NewVector(Vector.x(b), Vector.y(a), Vector.z(a));
        let v101 = Vector.NewVector(Vector.x(b), Vector.y(a), Vector.z(b));
        let v110 = Vector.NewVector(Vector.x(b), Vector.y(b), Vector.z(a));
        let v111 = Vector.NewVector(Vector.x(b), Vector.y(b), Vector.z(b));
        let triangles = [
            Triangle.NewTriangle(v000, v100, v110, z, z, z, m),
            Triangle.NewTriangle(v000, v110, v010, z, z, z, m),
            Triangle.NewTriangle(v001, v101, v111, z, z, z, m),
            Triangle.NewTriangle(v001, v111, v011, z, z, z, m),
            Triangle.NewTriangle(v000, v100, v101, z, z, z, m),
            Triangle.NewTriangle(v000, v101, v001, z, z, z, m),
            Triangle.NewTriangle(v010, v110, v111, z, z, z, m),
            Triangle.NewTriangle(v010, v111, v011, z, z, z, m),
            Triangle.NewTriangle(v000, v010, v011, z, z, z, m),
            Triangle.NewTriangle(v000, v011, v001, z, z, z, m),
            Triangle.NewTriangle(v100, v110, v111, z, z, z, m),
            Triangle.NewTriangle(v100, v111, v101, z, z, z, m)
        ];
        return Mesh.NewMesh(Triangle.Pack(triangles));
    }
} @end
