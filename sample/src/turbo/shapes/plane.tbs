export class Plane extends Shape{
	point:Vector3;
	normal:Vector3;
	material:Material;
    box:Box;

	constructor(point:Vector3, normal:Vector3, material:Material):Plane {
	    super();
        this.point = point;
        this.normal = normal.normalize(normal);
        this.material = material;
        this.box = null;
        return this;
    }

    @virtual
    type():ShapeType {
        return ShapeType.PLANE;
    }

    // @virtual
    // toJSON(SELF){
    //     return {
    //         point:Vector3.ToJSON(this.point),
    //         normal:Vector3.ToJSON(this.Normal),
    //         material:Material.ToJSON(this.material),
    //         box:box.ToJSON(this.box),
    //     }
    // }

    @virtual
    compile():void {
    }

    @virtual
    boundingBox():Box {

	    if(this.box = null) {
            this.box = new Box(new Vector3(
                    Number.NEGATIVE_INFINITY,
                    Number.NEGATIVE_INFINITY,
                    Number.NEGATIVE_INFINITY
                ),
                new Vector3(
                    Number.POSITIVE_INFINITY,
                    Number.POSITIVE_INFINITY,
                    Number.POSITIVE_INFINITY
                )
            );
        }
        return this.box;
    }

    @virtual
    intersect(ray:Ray):Hit {
        let d = this.normal.dot(ray.direction);
        if (Math.abs(d) < EPS) {
            return Hit.NoHit
        }
        let a:Vector3 = this.point.sub(ray.origin);
        let t:float32 = a.dot(this.normal) / d;
        if (t < EPS) {
            return Hit.NoHit
        }
        return new Hit(this, t, null);
    }

    @virtual 
    uv(a:Vector3):Vector3 {
        return new Vector3();
    }

    @virtual
    materialAt(a:Vector3):Material {
        return this.material;
    }

    @virtual
    normalAt(a:Vector3):Vector3 {
        return this.normal;
    }

}
