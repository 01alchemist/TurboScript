export enum ShapeType{
	UNKNOWN,
	PLANE,
	CUBE,
	SPHERE,
	TRIANGLE,
	MESH,
    Volume,
    SDFShape
}

export class Shape{

    shapeId:uint32;

	constructor(id:uint32) {
        this.shapeId = id;
	}

	@virtual
    type():ShapeType{
		return ShapeType.UNKNOWN;
	}

	// @virtual
    // ToJSON(SELF:number){
	// 	throw "Pure: shape.ToJSON()";
	// }

	@virtual
    compile():void {
		//throw "Pure: shape.compile()";
	}

	@virtual
    boundingBox():Box{
		//throw "Pure: shape.boundingBox()";
        return null;
	}

	@virtual
    intersect(ray:Ray):Hit{
		// throw "Pure: shape.Intersect()";
		return null;
	}

	@virtual
    uv(p:Vector3):Vector3 {
		// throw "Pure: shape.uv()";
        return null;
	}

	@virtual
    normalAt(p:Vector3):Vector3 {
		// throw "Pure: shape.NormalAt()";
        return null;
	}

	@virtual
    materialAt(p:Vector3):Material {
		// throw "Pure: shape.MaterialAt()";
        return null;
	}

}

export class TransformedShape extends Shape{

	box:Box;
	shape:Shape;
	matrix:Matrix;
	inverse:Matrix;
	transpose:Matrix;

	constructor(shape:Shape, matrix:Matrix) {
	    super();
        this.shape = shape;
		this.matrix = matrix;
		this.inverse = matrix.inverse();
		this.transpose = this.inverse.transpose();
	}

	@virtual
    boundingBox():Box {
        if(this.box == null){
            this.box = this.matrix.mulBox(this.shape.boundingBox());
        }
        return this.box;
	}

    @virtual 
    intersect(r:Ray):Hit {

        let invMat = this.inverse;
		let shapeRay:Ray = invMat.mulRay(r);
		let hit = this.shape.intersect(shapeRay);
		if (!hit.ok()) {
			return hit;
		}
        let transMat = this.transpose;
		let shape:number = hit.shape;
		let shapePosition:Vector3 = shapeRay.position(hit.T);
		let shapeNormal:Vector3 = Shape.NormalAt(shape, shapePosition);
		let position:Vector3 = Matrix.MulPosition_vec3(this.matrix, shapePosition);
		let normal:Vector3 = Matrix.MulDirection_vec3(transMat, shapeNormal);
		let material = Material.MaterialAt(shape, shapePosition);
		let inside = false;
		if (shapeNormal.dot(shapeRay.direction) > 0) {
            normal = normal.negate();
			inside = true;
		}
		let ray:number = new Ray(position, normal);
		let info = new HitInfo(shape, position, normal, ray, material, inside);
		hit.T = position.sub(r.origin).length();
		hit.HitInfo = info;
		return hit;
	}

    @virtual
	type():ShapeType {
        return this.shape.type();
    }

    // @virtual
    // ToJSON(){
    // 	let json = Shape.ToJSON(this.shape);
    //     json.box = box.ToJSON(TransformedShape.boundingBox(SELF));
    //     return json;
    // }

    @virtual
    compile():void {
        this.shape.compile();
    }

    @virtual
    uv (p:Vector3):Vector3 {
        return this.shape.uv(p);
    }

    @virtual
    normalAt(p:Vector3):Vector3 {
        return this.shape.normalAt(p);
    }

    @virtual
    materialAt(p:Vector3):Material {
        return this.shape.materialAt(p);
    }
}