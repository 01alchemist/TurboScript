@turbo  class Triangle extends Shape{
	V1:int32
    V2:int32
    V3:int32
    N1:int32
    N2:int32
    N3:int32
    T1:int32
    T2:int32
    T3:int32
    Material:int32
    Box:int32
    HasBox:uint8

    @method init(SELF, v1:number=-1, v2:number=-1, v3:number=-1, n1:number=-1, n2:number=-1, n3:number=-1, t1:number=-1, t2:number=-1, t3:number=-1, material:number=-1){
        SELF.V1 = v1;
        SELF.V2 = v2;
        SELF.V3 = v3;
        SELF.N1 = n1;
        SELF.N2 = n2;
        SELF.N3 = n3;
        SELF.T1 = t1;
        SELF.T2 = t2;
        SELF.T3 = t3;
        SELF.Material = material;
		return SELF;
	}

	static NewTriangle(v1:number, v2:number, v3:number, t1:number, t2:number, t3:number, material:number):number {
		let SELF = @new Triangle;
		SELF.V1 = v1;
		SELF.V2 = v2;
		SELF.V3 = v3;
		SELF.T1 = t1;
		SELF.T2 = t2;
		SELF.T3 = t3;
		SELF.Material = material;
		//SELF.FixNormals();
		return SELF;
	}

    static Pack(triangles:number[]):number {
        let packed = @new int32.Array(triangles.length);
        triangles.forEach((triangle, i) =>{
            int32.Array.setAt(packed, i, triangle);
        });
        return packed;
    }

    static Copy(a:number, b:number):number{
        Triangle.V1(b) = Vector.Clone(Triangle.V1(a));
        Triangle.V2(b) = Vector.Clone(Triangle.V2(a));
        Triangle.V3(b) = Vector.Clone(Triangle.V3(a));
        Triangle.N1(b) = Vector.Clone(Triangle.N1(a));
        Triangle.N2(b) = Vector.Clone(Triangle.N2(a));
        Triangle.N3(b) = Vector.Clone(Triangle.N3(a));
        Triangle.T1(b) = Vector.Clone(Triangle.T1(a));
        Triangle.T2(b) = Vector.Clone(Triangle.T2(a));
        Triangle.T3(b) = Vector.Clone(Triangle.T3(a));
        Triangle.Material(b) = Material.Clone(Triangle.Material(a));
        return b;
    }

    // static Vertices(SELF){
	// 	return {
     //        V1:SELF.V1,
     //        V2:SELF.V2,
     //        V3:SELF.V3
     //    }
	// }

    @virtual Type(SELF:number){
        return ShapeType.TRIANGLE;
    }

	@virtual ToJSON(SELF){
		return {
			vertex:{
				v1:Vector.ToJSON(SELF.V1),
				v2:Vector.ToJSON(SELF.V2),
				v3:Vector.ToJSON(SELF.V3)
			},
			normal:{
				n1:Vector.ToJSON(SELF.N1),
				n2:Vector.ToJSON(SELF.N2),
				n3:Vector.ToJSON(SELF.N3)
			},
			uv:{
				t1:Vector.ToJSON(SELF.T1),
				t2:Vector.ToJSON(SELF.T2),
				t3:Vector.ToJSON(SELF.T3)
			},
			material:Material.ToJSON(SELF.Material),
			box:Box.ToJSON(SELF.Box),
		}
	}

    @virtual Compile(SELF) {
	}

    @virtual BoundingBox(SELF, c?:number):number{
        if(SELF.HasBox){
            return SELF.Box;
        }else {
            var min = Vector.Min_mem(Vector.Min_mem(SELF.V1, SELF.V2), SELF.V3);
            var max = Vector.Max_mem(Vector.Max_mem(SELF.V1, SELF.V2), SELF.V3);
            SELF.Box = c?c:@new Box;
            SELF.HasBox = 1;
        }
		return Box.Init_mem(SELF.Box, min, max);
	}
    /*Intersect(SELF, r:Ray):Hit {
        //Möller–Trumbore intersection algorithm
        let V1 = new Vector3().read(SELF.V1);
        let V2 = new Vector3().read(SELF.V2);
        let V3 = new Vector3().read(SELF.V3);

        //Edge1
        var e1:Vector3 = V2.sub(V1);

        //Edge2
        var e2:Vector3 = V3.sub(V1);

        //Begin calculating determinant - also used to calculate u parameter
        var p:Vector3 = r.direction.cross(e2);
        var det:number = e1.dot(p);
        //NOT CULLING
        if (det > -EPS && det < EPS) {
            return Hit.NoHit;
        }
        var inv:number = 1 / det;

        //calculate distance from V1 to ray origin
        var t:Vector3 = r.origin.sub(V1);

        //Calculate u parameter and test bound
        var u:number = t.dot(p) * inv;
        //The intersection lies outside of the triangle
        if (u < 0 || u > 1) {
            return Hit.NoHit;
        }

        //Prepare to test v parameter
        var q:Vector3 = t.cross(e1);

        //Calculate V parameter and test bound
        var v:number = r.direction.dot(q) * inv;
        //The intersection lies outside of the triangle
        if (v < 0 || u + v > 1) {
            return Hit.NoHit;
        }

        var d:number = e2.dot(q) * inv;
        if (d < EPS) {
            return Hit.NoHit
        }

        //ray intersection
        return new Hit(SELF, d);
    }*/
    @virtual Intersect(SELF, r:Ray):Hit {

		let e1x = Vector.x(SELF.V2) - Vector.x(SELF.V1);
        let e1y = Vector.y(SELF.V2) - Vector.y(SELF.V1);
        let e1z = Vector.z(SELF.V2) - Vector.z(SELF.V1);
        let e2x = Vector.x(SELF.V3) - Vector.x(SELF.V1);
        let e2y = Vector.y(SELF.V3) - Vector.y(SELF.V1);
        let e2z = Vector.z(SELF.V3) - Vector.z(SELF.V1);
        let px = r.direction.y * e2z - r.direction.z * e2y;
        let py = r.direction.z * e2x - r.direction.x * e2z;
        let pz = r.direction.x * e2y - r.direction.y * e2x;
		let det = e1x * px + e1y * py + e1z * pz;
		if (det > -EPS && det < EPS) {
			return Hit.NoHit;
		}
		let inv = 1 / det;
        let tx = r.origin.x - Vector.x(SELF.V1);
        let ty = r.origin.y - Vector.y(SELF.V1);
        let tz = r.origin.z - Vector.z(SELF.V1);
        let u = (tx * px + ty * py + tz * pz) * inv;
		if (u < 0 || u > 1) {
			return Hit.NoHit;
		}
        let qx = ty * e1z - tz * e1y;
        let qy = tz * e1x - tx * e1z;
        let qz = tx * e1y - ty * e1x;
        let v = (r.direction.x * qx + r.direction.y * qy + r.direction.z * qz) * inv;
		if (v < 0 || u+v > 1) {
			return Hit.NoHit;
		}
        let d = (e2x*qx + e2y*qy + e2z*qz) * inv;
		if (d < EPS) {
			return Hit.NoHit;
		}
		return new Hit(SELF, d, null);
	}

    @virtual UV(SELF, p:Vector3):Vector3 {

        let T1:Vector3 = new Vector3().read(SELF.T1);
        let T2:Vector3 = new Vector3().read(SELF.T2);
        let T3:Vector3 = new Vector3().read(SELF.T3);

        let uvw = Triangle.Barycentric(SELF, p);
        let n = new Vector3();
        n = n.add(T1.mulScalar(uvw.u));
        n = n.add(T2.mulScalar(uvw.v));
        n = n.add(T3.mulScalar(uvw.w));
        n.z = 0;
		return n
	}

    @virtual MaterialAt(SELF, p:Vector3):Vector3 {
		return SELF.Material;
	}

    @virtual NormalAt(SELF, p:Vector3):Vector3 {

        let V1:Vector3 = new Vector3().read(SELF.V1);
        let V2:Vector3 = new Vector3().read(SELF.V2);
        let V3:Vector3 = new Vector3().read(SELF.V3);

        let n1:Vector3 = new Vector3().read(SELF.N1);
        let n2:Vector3 = new Vector3().read(SELF.N2);
        let n3:Vector3 = new Vector3().read(SELF.N3);

        let T1:Vector3 = new Vector3().read(SELF.T1);
        let T2:Vector3 = new Vector3().read(SELF.T2);
        let T3:Vector3 = new Vector3().read(SELF.T3);

		let uvw = Triangle.Barycentric(SELF, p);
		let n = new Vector3();
        n = n.add(n1.mulScalar(uvw.u));
        n = n.add(n2.mulScalar(uvw.v));
        n = n.add(n3.mulScalar(uvw.w));

		if (Material.NormalTexture(SELF.Material)) {
			let b = new Vector3();
            b = b.add(T1.mulScalar(uvw.u));
            b = b.add(T2.mulScalar(uvw.v));
            b = b.add(T3.mulScalar(uvw.w));
			let ns:Vector3 = Texture.NormalSample(Material.NormalTexture(SELF.Material), b.x, b.y);
			let dv1 = V2.sub(V1);
            let dv2 = V3.sub(V1);
            let dt1 = T2.sub(T1);
            let dt2 = T3.sub(T1);

			let T = dv1.mulScalar(dt2.y).sub(dv2.mulScalar(dt1.y)).normalize();
			let b = dv2.mulScalar(dt1.x).sub(dv1.mulScalar(dt2.x)).normalize();
            let N = T.cross(b);
			let matrix = new Matrix4(
					T.x, b.x, N.x, 0,
					T.y, b.y, N.y, 0,
					T.z, b.z, N.z, 0,
					0, 0, 0, 1);
			n = matrix.mulDirection(ns);
		}
		if (Material.BumpTexture(SELF.Material)) {
			let b = new Vector3();
            b = b.add(T1.mulScalar(uvw.u));
            b = b.add(T2.mulScalar(uvw.v));
            b = b.add(T3.mulScalar(uvw.w));
			let bump = Texture.BumpSample(Material.BumpTexture(SELF.Material), b.x, b.y);
            let dv1 = V2.sub(V1);
            let dv2 = V3.sub(V1);
            let dt1 = T2.sub(T1);
            let dt2 = T3.sub(T1);
			let tangent = dv1.mulScalar(dt2.y).sub(dv2.mulScalar(dt1.y)).normalize();
			let bitangent = dv2.mulScalar(dt1.x).sub(dv1.mulScalar(dt2.x)).normalize();
			n = n.add(tangent.mulScalar(bump.x * Material.BumpMultiplier(SELF.Material)));
			n = n.add(bitangent.mulScalar(bump.y * Material.BumpMultiplier(SELF.Material)));
		}
		n = n.normalize();
		return n;
	}

	static Area(SELF):number {
		let e1 = Vector.Sub_mem(SELF.V2, SELF.V1);
		let e2 = Vector.Sub_mem(SELF.V3, SELF.V1);
		let n = Vector.Cross_mem(e1, e2);
		return Vector.Length_mem(n) / 2;
	}

	static Barycentric(SELF, p:Vector3):{u:number, v:number, w:number} {
        let _V1:Vector3 = new Vector3().read(SELF.V1);
        let _V2:Vector3 = new Vector3().read(SELF.V2);
        let _V3:Vector3 = new Vector3().read(SELF.V3);

        let v0 = _V2.sub(_V1);
        let v1 = _V3.sub(_V1);
        let v2 = p.sub(_V1);

		let d00 = v0.dot(v0);
		let d01 = v0.dot(v1);
		let d11 = v1.dot(v1);
		let d20 = v2.dot(v0);
		let d21 = v2.dot(v1);
		let d = d00*d11 - d01*d01;
		let v = (d11*d20 - d01*d21) / d;
		let w = (d00*d21 - d01*d20) / d;
		let u = 1 - v - w;
		return {u:u,v:v,w:w};
	}

    static UpdateBox(SELF) {
        var min = Vector.Min_mem(Vector.Min_mem(SELF.V1, SELF.V2), SELF.V3);
        var max = Vector.Max_mem(Vector.Max_mem(SELF.V1, SELF.V2), SELF.V3);
        SELF.Box = @new Box;
        SELF.HasBox = 1;
        return Box.Init_mem(SELF.Box, min, max);
    }

	static FixNormals(SELF) {
		let e1 = Vector.Sub_mem(SELF.V2, SELF.V1);
		let e2 = Vector.Sub_mem(SELF.V3, SELF.V1);
		let n = Vector.Normalize_mem(Vector.Cross_mem(e1, e2));

        if(Vector.IsZero(SELF.N1)) {
            Vector.Copy(SELF.N1, n);
        }
        if(Vector.IsZero(SELF.N2)) {
            Vector.Copy(SELF.N2, n);
        }
        if(Vector.IsZero(SELF.N3)) {
            Vector.Copy(SELF.N3, n);
        }
        free(e1);
        free(e2);
        free(n);
	}

} @end
