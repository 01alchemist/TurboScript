export class VolumeWindow {
    lo: float64;
    hi: float64;
    material: int32;

    constructor(lo: float64, hi: float64, material: Material) {
        this.lo = lo;
        this.hi = hi;
        this.material = material;
    }
}


export class Volume {
    width: int32;
    height: int32;
    depth: int32;
    zscale: float64;
    data: Array<float64>;
    windows: Array<VolumeWindow>;
    box: Box;

    constructor(width: int32, height: int32, depth: int32, zd: float64, data: Array<float64>, windows: Array<VolumeWindow>,
                box: Box): Volume {
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.zscale = zd;
        this.data = data;
        this.windows = windows;
        this.box = box;
        return this;
    }

    static create(box: Box, images: Array<Image>, sliceSpacing: int32, windows: Array<VolumeWindow>): Volume {
        let bounds: Box = images[0].bounds();
        let size = bounds.size();
        let w = size.x;
        let h = size.y;
        let d = images.length;
        // TODO: w/h aspect ratio
        let zs: float32 = (sliceSpacing * d) / w;
        let numData: number = w * h * d;
        let data = new Array<float64>(numData);
        let i: int32 = 0;
        let y = 0;
        let x = 0;
        while (i < images.length) {
            let img = images[i];
            y = 0;
            while (y < h) {
                x = 0;
                while (x < w) {
                    let r = img.getPixel64(x, y).r;
                    let f = r / 65535;
                    data[x + y * w + i * w * h] = f;
                    x = x + 1;
                }
                y = y + 1;
            }
            i = i + 1;
        }
        let vol = new Volume(w, h, d, zs, data, windows, box);
        return vol;
    }

    get(x: number, y: number, z: number): float64 {
        if (x < 0 || y < 0 || z < 0 || x >= this.width || y >= this.height || z >= this.depth) {
            return 0
        }
        return this.data[x + y * this.width + z * this.width * this.height];
    }

    sample(x: number, y: number, z: number): number {
        z /= this.zscale;
        x = ((x + 1) / 2) * this.width;
        y = ((y + 1) / 2) * this.height;
        z = ((z + 1) / 2) * this.depth;
        let x0 = Math.floor(x);
        let y0 = Math.floor(y);
        let z0 = Math.floor(z);
        let x1 = x0 + 1;
        let y1 = y0 + 1;
        let z1 = z0 + 1;
        let v000 = this.get(x0, y0, z0);
        let v001 = this.get(x0, y0, z1);
        let v010 = this.get(x0, y1, z0);
        let v011 = this.get(x0, y1, z1);
        let v100 = this.get(x1, y0, z0);
        let v101 = this.get(x1, y0, z1);
        let v110 = this.get(x1, y1, z0);
        let v111 = this.get(x1, y1, z1);
        x -= x0;
        y -= y0;
        z -= z0;
        let c00 = v000 * (1 - x) + v100 * x;
        let c01 = v001 * (1 - x) + v101 * x;
        let c10 = v010 * (1 - x) + v110 * x;
        let c11 = v011 * (1 - x) + v111 * x;
        let c0 = c00 * (1 - y) + c10 * y;
        let c1 = c01 * (1 - y) + c11 * y;
        return c0 * (1 - z) + c1 * z;
    }

    compile() {
    }

    boundingBox(): number {
        return this.box;
    }

    sign(a: Vector3): int32 {
        let s = this.sample(a.x, a.y, a.z);
        let i: int32 = 0;
        while (i < this.windows.length) {
            let window: VolumeWindow = this.windows[i];
            if (s < window.lo) {
                return i + 1;
            }
            if (s > window.hi) {
                continue;
            }
            return 0
        }
        return this.windows.length + 1;
    }

    intersect(ray: Ray): Hit {
        let hit = this.box.intersect(ray);
        let tmin = hit.tmin;
        let tmax = hit.tmax;
        let step = 1.0 / 512;
        let start = Math.max(step, tmin);
        let sign = -1;
        for (let t = start; t <= tmax; t += step) {
            let p = ray.position(t);
            let s = this.sign(p);
            if (s == 0 || (sign >= 0 && s != sign)) {
                t -= step;
                step /= 64;
                t += step;
                for (let i = 0; i < 64; i++) {
                    if (this.sign(ray.position(t)) == 0) {
                        return new Hit(this, t - step, null)
                    }
                    t += step;
                }
            }
            sign = s;
        }
        return Hit.NoHit;
    }

    uv(p: number): Vector3 {
        return new Vector3(); // not implemented
    }

    materialAt(p: Vector3): Material {
        let be: float32 = 1e9;
        let bm: number = null;
        let s = this.sample(p.x, p.y, p.z);
        let i: int32 = 0;
        while (i < this.windows.length) {
            let window: VolumeWindow = this.windows[i];
            if (s >= window.lo && s <= window.hi) {
                return window.material;
            }
            let e = Math.min(Math.abs(s - window.lo), Math.abs(s - window.hi));
            if (e < be) {
                be = e;
                bm = window.material;
            }
        }
        return bm;
    }

    normalAt(p: Vector3): Vector3 {
        let eps = 0.001;
        let n = new Vector3(
            this.sample(p.x - eps, p.y, p.z) - this.sample(p.x + eps, p.y, p.z),
            this.sample(p.x, p.y - eps, p.z) - this.sample(p.x, p.y + eps, p.z),
            this.sample(p.x, p.y, p.z - eps) - this.sample(p.x, p.y, p.z + eps)
        );
        return n.normalize(n);
    }

}

