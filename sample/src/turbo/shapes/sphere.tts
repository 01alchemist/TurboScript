@turbo class Sphere extends Shape{
	Center:Vector
	Radius:float64
	Material:Material
	Box:Box

	@method init(SELF, center:number, radius:number, material:number, box:number):number{
		SELF.Center = center;
		SELF.Radius = radius;
		SELF.Material = material;
		SELF.Box = box;
		return SELF;
	}

	static NewSphere(center:number, radius:number, material:number):number {
		let min = @new Vector;
		let max = @new Vector;
		Vector.Init_mem(min, Vector.x(center) - radius, Vector.y(center) - radius, Vector.z(center) - radius);
		Vector.Init_mem(max, Vector.x(center) + radius, Vector.y(center) + radius, Vector.z(center) + radius);
		let box = @new Box;
		Box.Init_mem(box , min, max);
		let ptr:number = @new Sphere;
		return Sphere.init(ptr, center, radius, material, box);
	}

	@virtual Type(SELF){
		return ShapeType.SPHERE;
	}

	@virtual ToJSON(SELF){
		return {
			center:Vector.ToJSON(SELF.Center),
			radius:SELF.Radius,
			material:Material.ToJSON(SELF.Material),
			box:Box.ToJSON(SELF.Box),
		}
	}

	@virtual Compile(SELF) {
	}

	@virtual BoundingBox(SELF):number {
		return SELF.Box;
	}

	@virtual Intersect(SELF, r:Ray):Hit {

        let center:Vector3 = new Vector3().read(SELF.Center);
		let to:Vector3 = r.origin.sub(center);
		let b:number = to.dot(r.direction);
		let c:number = to.dot(to) - SELF.Radius * SELF.Radius;
		let d = b * b - c;
        center = null;
		if (d > 0) {
			d = Math.sqrt(d);
			let t1 = -b - d;
			if (t1 > EPS) {
				return new Hit(SELF, t1, null)
			}
			let t2 = -b + d;
			if (t2 > EPS) {
				return new Hit(SELF, t2, null);
			}
		}
		return Hit.NoHit;
	}

	@virtual UV(SELF, p:Vector3):Vector3 {
        let center:Vector3 = new Vector3().read(SELF.Center);
        p = p.sub(center);
        u = Math.atan2(p.z, p.x);
        v = Math.atan2(p.y, new Vector3(p.x, 0, p.z).length());
        u = 1 - (u + Math.PI) / (2 * Math.PI);
        v = (v + Math.PI/2) / Math.PI;
        center = null;
        return new Vector3(u, v, 0);
	}

	@virtual MaterialAt(SELF, _p:Vector3):number {
		return SELF.Material;
	}

	@virtual NormalAt(SELF, p:Vector3):Vector3 {
        let center:Vector3 = new Vector3().read(SELF.Center);
        let p = p.sub(center).normalize();
        center = null;
        return p;
	}

} @end