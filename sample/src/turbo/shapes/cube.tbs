export class Cube extends Shape{
	min:Vector3;
	max:Vector3;
	material:Material;
	box:Box;

	constructor(min:Vector3, max:Vector3, material:Material=null, box:Box=null):Cube {
	    super();
        this.min = min;
        this.max = max;
        this.material = material;
        this.box = box;
        return this;
    }

    @virtual
    type():void {
        throw ShapeType.CUBE;
    }

    // @virtual toJSON(SELF){
    //     return {
    //         min:Vector.ToJSON(this.min),
    //         max:Vector.ToJSON(this.max),
    //         material:material.ToJSON(this.material),
    //         box:box.ToJSON(this.box),
    //     }
    // }

    @virtual
    compile():void {
    }

    @virtual
    boundingBox():Box{
        return this.box;
    }

    @virtual
    intersect(r:Ray):Hit {
        let min = new Vector3().read(this.min);
        let max = new Vector3().read(this.max);

        let n:Vector3 = min.sub(r.origin).div(r.direction);
        let f:Vector3 = max.sub(r.origin).div(r.direction);
        let _n = n.min(f);
        let _f = n.max(f);
        let t0 = Math.max(Math.max(_n.x, _n.y), _n.z);
        let t1 = Math.min(Math.min(_f.x, _f.y), _f.z);
        min = null;
        max = null;
        if (t0 > 0 && t0 < t1) {
            return new Hit(t0, null)
        }
        return Hit.NoHit;
    }

    @virtual
    uv(p:Vector3):Vector3 {
        let min = new Vector3().read(this.min);
        let max = new Vector3().read(this.max);
        let uv = p.sub(min).div(max.sub(min));
        min = null;
        max = null;
        return new Vector3(uv.x, uv.z, 0);
    }

    @virtual
    materialAt(p:Vector3):number {
        return this.material;
    }

    @virtual
    normalAt(p:Vector3):Vector3 {

        let min = new Vector3().read(this.min);
        let max = new Vector3().read(this.max);

        if(p.x < min.x + EPS){
            return new Vector3(-1, 0, 0);
        }else if(p.x > max.x - EPS){
            return new Vector3(1, 0, 0);
        }else if (p.y < min.y + EPS){
            return new Vector3(0, -1, 0)
        }else if(p.y > max.y - EPS){
            return new Vector3(0, 1, 0);
        }else if(p.z < min.z + EPS){
            return new Vector3(0, 0, -1);
        }else if(p.z > max.z - EPS){
            return new Vector3(0, 0, 1);
        }
        min = null;
        max = null;
        return new Vector3(0, 1, 0);
    }

    mesh():Mesh {
        let a = this.min;
        let b = this.max;
        let z = new Vector3();
        let m = this.material;
        let v000 = new Vector3(a.x, a.y, a.z);
        let v001 = new Vector3(a.x, a.y, b.z);
        let v010 = new Vector3(a.x, b.y, a.z);
        let v011 = new Vector3(a.x, b.y, b.z);
        let v100 = new Vector3(b.x, a.y, a.z);
        let v101 = new Vector3(b.x, a.y, b.z);
        let v110 = new Vector3(b.x, b.y, a.z);
        let v111 = new Vector3(b.x, b.y, b.z);
        let triangles = [
            new Triangle(v000, v100, v110, z, z, z, m),
            new Triangle(v000, v110, v010, z, z, z, m),
            new Triangle(v001, v101, v111, z, z, z, m),
            new Triangle(v001, v111, v011, z, z, z, m),
            new Triangle(v000, v100, v101, z, z, z, m),
            new Triangle(v000, v101, v001, z, z, z, m),
            new Triangle(v010, v110, v111, z, z, z, m),
            new Triangle(v010, v111, v011, z, z, z, m),
            new Triangle(v000, v010, v011, z, z, z, m),
            new Triangle(v000, v011, v001, z, z, z, m),
            new Triangle(v100, v110, v111, z, z, z, m),
            new Triangle(v100, v111, v101, z, z, z, m)
        ];
        return new Mesh(Triangle.pack(triangles));
    }
}
