export class Matrix{

    x00:float32;
    x01:float32;
    x02:float32;
    x03:float32;

    x10:float32;
    x11:float32;
    x12:float32;
    x13:float32;

    x20:float32;
    x21:float32;
    x22:float32;
    x23:float32;

    x30:float32;
    x31:float32;
    x32:float32;
    x33:float32;

    constructor(
        x00:float32=0.0, x01:float32=0.0, x02:float32=0.0, x03:float32=0.0, 
        x10:float32=0.0, x11:float32=0.0, x12:float32=0.0, x13:float32=0.0, 
        x20:float32=0.0, x21:float32=0.0, x22:float32=0.0, x23:float32=0.0, 
        x30:float32=0.0, x31:float32=0.0, x32:float32=0.0, x33:float32=0.0
    )
    {
        this.x00 = x00;
        this.x01 = x01;
        this.x02 = x02;
        this.x03 = x03;
        this.x10 = x10;
        this.x11 = x11;
        this.x12 = x12;
        this.x13 = x13;
        this.x20 = x20;
        this.x21 = x21;
        this.x22 = x22;
        this.x23 = x23;
        this.x30 = x30;
        this.x31 = x31;
        this.x32 = x32;
        this.x33 = x33;
    }

    set(
        x00:float32=0.0, x01:float32=0.0, x02:float32=0.0, x03:float32=0.0,
        x10:float32=0.0, x11:float32=0.0, x12:float32=0.0, x13:float32=0.0,
        x20:float32=0.0, x21:float32=0.0, x22:float32=0.0, x23:float32=0.0,
        x30:float32=0.0, x31:float32=0.0, x32:float32=0.0, x33:float32=0.0
    ):Matrix {
        this.x00 = x00;
        this.x01 = x01;
        this.x02 = x02;
        this.x03 = x03;
        this.x10 = x10;
        this.x11 = x11;
        this.x12 = x12;
        this.x13 = x13;
        this.x20 = x20;
        this.x21 = x21;
        this.x22 = x22;
        this.x23 = x23;
        this.x30 = x30;
        this.x31 = x31;
        this.x32 = x32;
        this.x33 = x33;
        return this;
    }

    static newIdentity(c:Matrix):Matrix {
        c = c != null ? c :  new Matrix();
        return c.set(
            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0
        );
    }

    isEqual(b:Matrix):boolean {
        return  this.x00 == b.x00 && this.x01 == b.x01 && this.x02 == b.x02 && this.x03 == b.x03 &&
                this.x10 == b.x10 && this.x11 == b.x11 && this.x12 == b.x12 && this.x13 == b.x13 &&
                this.x20 == b.x20 && this.x21 == b.x21 && this.x22 == b.x22 && this.x23 == b.x23 &&
                this.x30 == b.x30 && this.x31 == b.x31 && this.x32 == b.x32 && this.x33 == b.x33;
    }

    isIdentity():boolean {
        return  this.x00 == 1.0 && this.x01 == 0.0 && this.x02 == 0.0 && this.x03 == 0.0 &&
                this.x10 == 0.0 && this.x11 == 1.0 && this.x12 == 0.0 && this.x13 == 0.0 &&
                this.x20 == 0.0 && this.x21 == 0.0 && this.x22 == 1.0 && this.x23 == 0.0 &&
                this.x30 == 0.0 && this.x31 == 0.0 && this.x32 == 0.0 && this.x33 == 1.0;
    }

    static translateUnitMatrix(v:Vector3, c:Matrix):Matrix{
        c = c != null ? c : new Matrix();
        return c.set(
            1.0, 0.0, 0.0, v.x,
            0.0, 1.0, 0.0, v.y,
            0.0, 0.0, 1.0, v.z,
            0.0, 0.0, 0.0, 1
        );
    }

    static scaleUnitMatrix(v:Vector3, c:Matrix):Matrix{
        c = c != null ? c : new Matrix();
        return c.set(
            v.x, 0.0, 0.0, 0.0,
            0.0, v.y, 0.0, 0.0,
            0.0, 0.0, v.z, 0.0,
            0.0, 0.0, 0.0, 1
        );
    }

    static rotateUnitMatrix(v:Vector3, a:float32, c:Matrix):Matrix{
        v.normalize(v);
        let s:float32 = Math.sin(a);
        let _c:float32 = Math.cos(a);
        let m:float32 = 1.0 - _c;

        c = c != null ? c : new Matrix();
        return c.set(
            m*v.x * v.x + _c, m * v.x * v.y + v.z * s, m * v.z * v.x - v.y * s, 0.0,
            m*v.x * v.y - v.z * s, m*v.y * v.y + _c, m*v.y * v.z + v.x * s, 0.0,
            m*v.z * v.x + v.y * s, m*v.y * v.z - v.x * s, m*v.z * v.z + _c, 0.0,
            0.0, 0.0, 0.0, 1.0
        );
    }

    static frustumUnitMatrix(l:float32, r:float32, b:float32, t:float32, n:float32, f:float32, c:Matrix):Matrix{

        let t1:float32 = 2.0 * n;
        let t2:float32 = r - l;
        let t3:float32 = t - b;
        let t4:float32 = f - n;

        c = c != null ? c : new Matrix();
        return c.set(
            t1 / t2, 0.0, (r + l) / t2, 0.0,
            0.0, t1 / t3, (t + b) / t3, 0.0,
            0.0, 0.0, (-f - n) / t4, (-t1 * f) / t4,
            0.0, 0.0, -1, 0
        );
    }

    static orthographicUnitMatrix(l:float32, r:float32, b:float32, t:float32, n:float32, f:float32, c:Matrix):Matrix{
        c = c != null ? c : new Matrix();
        return c.set(
            2.0 / (r - l), 0.0, 0.0, -(r + l) / (r - l),
            0.0, 2 / (t - b), 0.0, -(t + b) / (t - b),
            0.0, 0.0, -2 / (f - n), -(f + n) / (f - n),
            0.0, 0.0, 0.0, 1.0
        );
    }

    static perspectiveUnitMatrix(fovy:float32, aspect:float32, near:float32, far:float32, c:Matrix):Matrix {
        let ymax:float32 = near * Math.tan(fovy * PI/360);
        let xmax:float32 = ymax * aspect;
        return Matrix.frustumUnitMatrix(-xmax, xmax, -ymax, ymax, near, far, c);
    }

    static LookAtMatrix(eye:Vector3, center:Vector3, up:Vector3, c:Matrix):Matrix{
            c = c != null ? c : new Matrix();
        up.normalize(up);
        let f:Vector3 = center.sub(eye).normalize();
        let s:Vector3 = f.cross(up).normalize();
        let u:Vector3 = s.cross(f);

        c.set(
            s.x, u.x, f.x, 0.0,
            s.y, u.y, f.y, 0.0,
            s.z, u.z, f.z, 0.0,
            0.0, 0.0, 0.0, 1.0
        );
        return c.transpose(c).inverse(c).translate(eye, c);
    }
    
    translate(v:Vector3, c:Matrix):Matrix {
        return this.mul(Matrix.translateUnitMatrix(v), c);
    }

    scale(v:Vector3, c:Matrix):Matrix{
        return this.mul(Matrix.scaleUnitMatrix(v), c);
    }

    rotate(v:Vector3, a:Vector3, c:Matrix):Matrix {
        return this.mul(Matrix.rotateUnitMatrix(v, a), c);
    }

    frustum(l:float32, r:float32, b:float32, t:float32, n:float32, f:float32, c:Matrix):Matrix {
        return this.mul(Matrix.frustumUnitMatrix(l, r, b, t, n, f, c), c);
    }

    orthographic(l:float32, r:float32, b:float32, t:float32, n:float32, f:float32, c:Matrix):Matrix {
        return this.mul(Matrix.orthographicUnitMatrix(l, r, b, t, n, f, c), c);
    }

    perspective(fovy:float32, aspect:float32, near:float32, far:float32, c:Matrix):Matrix {
        return this.mul(Matrix.perspectiveUnitMatrix(fovy, aspect, near, far, c), c);
    }

    mul(b:Matrix, m:Matrix):Matrix {
        m = m != null ? m : new Matrix();
        m.x00 = this.x00 * b.x00 + this.x01 * b.x10 + this.x02 * b.x20 + this.x03 * b.x30;
        m.x10 =this.x10 * b.x00 + this.x11 * b.x10 + this.x12 * b.x20 + this.x13 * b.x30;
        m.x20 = this.x20 * b.x00 + this.x21 * b.x10 + this.x22 * b.x20 + this.x23 * b.x30;
        m.x30 = this.x30 * b.x00 + this.x31 * b.x10 + this.x32 * b.x20 + this.x33 * b.x30;
        m.x01 = this.x00 * b.x01 + this.x01 * b.x11 + this.x02 * b.x21 + this.x03 * b.x31;
        m.x11 =this.x10 * b.x01 + this.x11 * b.x11 + this.x12 * b.x21 + this.x13 * b.x31;
        m.x21 = this.x20 * b.x01 + this.x21 * b.x11 + this.x22 * b.x21 + this.x23 * b.x31;
        m.x31 = this.x30 * b.x01 + this.x31 * b.x11 + this.x32 * b.x21 + this.x33 * b.x31;
        m.x02 = this.x00 * b.x02 + this.x01 * b.x12 + this.x02 * b.x22 + this.x03 * b.x32;
        m.x12 =this.x10 * b.x02 + this.x11 * b.x12 + this.x12 * b.x22 + this.x13 * b.x32;
        m.x22 = this.x20 * b.x02 + this.x21 * b.x12 + this.x22 * b.x22 + this.x23 * b.x32;
        m.x32 = this.x30 * b.x02 + this.x31 * b.x12 + this.x32 * b.x22 + this.x33 * b.x32;
        m.x03 = this.x00 * b.x03 + this.x01 * b.x13 + this.x02 * b.x23 + this.x03 * b.x33;
        m.x13 =this.x10 * b.x03 + this.x11 * b.x13 + this.x12 * b.x23 + this.x13 * b.x33;
        m.x23 = this.x20 * b.x03 + this.x21 * b.x13 + this.x22 * b.x23 + this.x23 * b.x33;
        m.x33 = this.x30 * b.x03 + this.x31 * b.x13 + this.x32 * b.x23 + this.x33 * b.x33;
        return m;
    }

    mulPosition(b:Vector3, c:Vector3):Vector3 {
        c = c != null? c : new Vector3();
        let x:float32 = this.x00 * b.x + this.x01 * b.y + this.x02 * b.z + this.x03;
        let y:float32 = this.x10 * b.x + this.x11 * b.y + this.x12 * b.z + this.x13;
        let z:float32 = this.x20 * b.x + this.x21 * b.y + this.x22 * b.z + this.x23;
        return c.set(x, y, z);
    }

    mulDirection(b:Vector3, c:Vector3):Vector3 {
        c = c != null? c : new Vector3();
        let x:float32 = this.x00 * b.x + this.x01 * b.y + this.x02 * b.z;
        let y:float32 =this.x10 * b.x + this.x11 * b.y + this.x12 * b.z;
        let z:float32 = this.x20 * b.x + this.x21 * b.y + this.x22 * b.z;
        return c.set(x, y, z).normalize(c);
    }

    mulRay(ray:Ray, c:Ray):Ray {
        c = c != null? c : new Ray();
        this.mulPosition(ray.origin, c.origin);
        this.mulDirection(ray.direction, c.direction);
        return c;
    }

    mulBox(box:Box, c:Box):Box {
        // http://dev.theomader.com/transform-bounding-boxes/
        let r:Vector3 = new Vector3(this.x00,this.x10, this.x20);
        let u:Vector3 = new Vector3(this.x01, this.x11, this.x21);
        let b:Vector3 = new Vector3(this.x02, this.x12, this.x22);
        let t:Vector3 = new Vector3(this.x03, this.x13, this.x23);
        let xa:Vector3 = r.mulScalar(box.min.x);
        let xb:Vector3 = r.mulScalar(box.max.x);
        let ya:Vector3 = u.mulScalar(box.min.y);
        let yb:Vector3 = u.mulScalar(box.max.y);
        let za:Vector3 = b.mulScalar(box.min.z);
        let zb:Vector3 = b.mulScalar(box.max.z);

        xa.min(xb, r);
        xa.max(xb, xb);
        ya.min(yb, u);
        ya.max(yb, yb);
        za.min(zb, b);
        za.max(zb, zb);

        r.add(u, r).add(b, r).add(t, r);
        xb.add(yb, xb).add(zb, xb).add(t, xb);

        delete u;
        delete b;
        delete t;
        delete xa;
        delete ya;
        delete za;
        delete yb;
        delete zb;

        c = c != null? c : new Box();
        return c.set(r, xb);
    }

    transpose(c:Matrix):Matrix {
        c = c != null ? c : new Matrix();
        return c.set(
            this.x00,this.x10, this.x20, this.x30,
            this.x01, this.x11, this.x21, this.x31,
            this.x02, this.x12, this.x22, this.x32,
            this.x03, this.x13, this.x23, this.x33
        );
    }

   determinant():float32 {
        return this.x00*this.x11*this.x22*this.x33 - this.x00*this.x11*this.x23*this.x32 +
        this.x00*this.x12*this.x23*this.x31 - this.x00*this.x12*this.x21*this.x33 +
        this.x00*this.x13*this.x21*this.x32 - this.x00*this.x13*this.x22*this.x31 -
        this.x01*this.x12*this.x23*this.x30 + this.x01*this.x12*this.x20*this.x33 -
        this.x01*this.x13*this.x20*this.x32 + this.x01*this.x13*this.x22*this.x30 -
        this.x01*this.x10*this.x22*this.x33 + this.x01*this.x10*this.x23*this.x32 +
        this.x02*this.x13*this.x20*this.x31 - this.x02*this.x13*this.x21*this.x30 +
        this.x02*this.x10*this.x21*this.x33 - this.x02*this.x10*this.x23*this.x31 +
        this.x02*this.x11*this.x23*this.x30 - this.x02*this.x11*this.x20*this.x33 -
        this.x03*this.x10*this.x21*this.x32 + this.x03*this.x10*this.x22*this.x31 -
        this.x03*this.x11*this.x22*this.x30 + this.x03*this.x11*this.x20*this.x32 -
        this.x03*this.x12*this.x20*this.x31 + this.x03*this.x12*this.x21*this.x30;
    }

    inverse(c:Matrix):Matrix {
        c = c != null ? c : new Matrix();
        let d:float32 = this.determinant();
        c.x00 = (this.x12*this.x23*this.x31 - this.x13*this.x22*this.x31 + this.x13*this.x21*this.x32 - this.x11*this.x23*this.x32 - this.x12*this.x21*this.x33 + this.x11*this.x22*this.x33) / d;
        c.x01 = (this.x03*this.x22*this.x31 - this.x02*this.x23*this.x31 - this.x03*this.x21*this.x32 + this.x01*this.x23*this.x32 + this.x02*this.x21*this.x33 - this.x01*this.x22*this.x33) / d;
        c.x02 = (this.x02*this.x13*this.x31 - this.x03*this.x12*this.x31 + this.x03*this.x11*this.x32 - this.x01*this.x13*this.x32 - this.x02*this.x11*this.x33 + this.x01*this.x12*this.x33) / d;
        c.x03 = (this.x03*this.x12*this.x21 - this.x02*this.x13*this.x21 - this.x03*this.x11*this.x22 + this.x01*this.x13*this.x22 + this.x02*this.x11*this.x23 - this.x01*this.x12*this.x23) / d;
        c.x10 = (this.x13*this.x22*this.x30 - this.x12*this.x23*this.x30 - this.x13*this.x20*this.x32 + this.x10*this.x23*this.x32 + this.x12*this.x20*this.x33 - this.x10*this.x22*this.x33) / d;
        c.x11 = (this.x02*this.x23*this.x30 - this.x03*this.x22*this.x30 + this.x03*this.x20*this.x32 - this.x00*this.x23*this.x32 - this.x02*this.x20*this.x33 + this.x00*this.x22*this.x33) / d;
        c.x12 = (this.x03*this.x12*this.x30 - this.x02*this.x13*this.x30 - this.x03*this.x10*this.x32 + this.x00*this.x13*this.x32 + this.x02*this.x10*this.x33 - this.x00*this.x12*this.x33) / d;
        c.x13 = (this.x02*this.x13*this.x20 - this.x03*this.x12*this.x20 + this.x03*this.x10*this.x22 - this.x00*this.x13*this.x22 - this.x02*this.x10*this.x23 + this.x00*this.x12*this.x23) / d;
        c.x20 = (this.x11*this.x23*this.x30 - this.x13*this.x21*this.x30 + this.x13*this.x20*this.x31 - this.x10*this.x23*this.x31 - this.x11*this.x20*this.x33 + this.x10*this.x21*this.x33) / d;
        c.x21 = (this.x03*this.x21*this.x30 - this.x01*this.x23*this.x30 - this.x03*this.x20*this.x31 + this.x00*this.x23*this.x31 + this.x01*this.x20*this.x33 - this.x00*this.x21*this.x33) / d;
        c.x22 = (this.x01*this.x13*this.x30 - this.x03*this.x11*this.x30 + this.x03*this.x10*this.x31 - this.x00*this.x13*this.x31 - this.x01*this.x10*this.x33 + this.x00*this.x11*this.x33) / d;
        c.x23 = (this.x03*this.x11*this.x20 - this.x01*this.x13*this.x20 - this.x03*this.x10*this.x21 + this.x00*this.x13*this.x21 + this.x01*this.x10*this.x23 - this.x00*this.x11*this.x23) / d;
        c.x30 = (this.x12*this.x21*this.x30 - this.x11*this.x22*this.x30 - this.x12*this.x20*this.x31 + this.x10*this.x22*this.x31 + this.x11*this.x20*this.x32 - this.x10*this.x21*this.x32) / d;
        c.x31 = (this.x01*this.x22*this.x30 - this.x02*this.x21*this.x30 + this.x02*this.x20*this.x31 - this.x00*this.x22*this.x31 - this.x01*this.x20*this.x32 + this.x00*this.x21*this.x32) / d;
        c.x32 = (this.x02*this.x11*this.x30 - this.x01*this.x12*this.x30 - this.x02*this.x10*this.x31 + this.x00*this.x12*this.x31 + this.x01*this.x10*this.x32 - this.x00*this.x11*this.x32) / d;
        c.x33 = (this.x01*this.x12*this.x20 - this.x02*this.x11*this.x20 + this.x02*this.x10*this.x21 - this.x00*this.x12*this.x21 - this.x01*this.x10*this.x22 + this.x00*this.x11*this.x22) / d;
        return c;
    }

    //TODO: Implement Pure JS export
    // @JS
    // {
    //     static fromTHREEJS(e:float32[]):float32 {
    //
    //         return matrix.NewMatrix(
    //             e[0], e[4], e[8], e[12],
    //             e[1], e[5], e[9], e[13],
    //             e[2], e[6], e[10], e[14],
    //             e[3], e[7], e[11], e[15]
    //         );
    //     }
    //
    //     static DATA() {
    //         return [
    //             this.x00, this.x01, this.x02, this.x03,
    //             this.x10, this.x11, this.x12, this.x13,
    //             this.x20, this.x21, this.x22, this.x23,
    //             this.x30, this.x31, this.x32, this.x33
    //         ]
    //     }
    // }
}