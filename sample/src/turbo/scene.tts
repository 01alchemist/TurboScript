@turbo class Scene {
	Color:Color
	Texture:Texture
	TextureAngle:float64
	Shapes:int32
	NumShapes:int32
	Lights:int32
	NumLights:int32
	tree:int32
	rays:int32

	@method init(SELF, color){
        SELF.Color = color;
        SELF.Texture = 0;
        SELF.TextureAngle = 0;
        SELF.rays = 0;
		return SELF;
	}

    static NewScene(color:number){
        let ptr = @new Scene;
        return Scene.init(ptr, Color.HexColor(color));
    }

	static Compile(SELF) {
		for (let i=0; i < SELF.NumShapes;i++) {
			let shape = Shape.Array.at(SELF.Shapes, i);
			Shape.Compile(shape);
		}
		if (!SELF.tree) {
			SELF.tree = Tree.NewTree(SELF.Shapes);
		}
		return SELF.tree;
	}

	static RayCount(SELF):number {
		// return Atomics.load(turbo.Runtime._mem_int32, SELF.rays);
        return SELF.rays;
	}

	static Intersect(SELF, r:number):Hit {
		// Atomics.add(turbo.Runtime._mem_int32, SELF.rays, 1);
        SELF.rays = SELF.rays + 1;
		return Tree.Intersect(SELF.tree, r);
	}

	static Sample(SELF, r:Ray, emission:boolean, samples:number, depth:number):Color3 {
        if (depth > this.MaxBounces) {
            return new Color3();
        }
        var hit = Scene.Intersect(SELF, r);
        if (!hit.Ok()) {
            return new Color3(0,0,0);
        }
        var info = hit.Info(r);
        var result:Color3 = new Color3();
        let material = info.Material
        let color:Color3 = Color.toColor3(Material.Color(material));
        let tint = Material.Tint(material);
        if (emission) {
            var emittance = Material.Emittance(material);
            if (emittance > 0) {
                let __f = Material.Emittance(material) * samples;
				let tmp = color.mulScalar(__f);
				result = result.add(tmp);
            }
        }
        var n:number = Math.round(Math.sqrt(samples));
        for (var u = 0; u < n; u++) {
            for (var v = 0; v < n; v++) {
                var p = Math.random();
                var fu = (u + Math.random()) / n;
                var fv = (v + Math.random()) / n;
                var bounce = r.bounce2(info, p, fu, fv);
                var indirect = Scene.Sample(SELF, bounce.ray, bounce.reflected, 1, depth + 1);
                if (bounce.reflected) {
                    var tinted = indirect.mix(color.mul(indirect), tint);
                    result = result.add(tinted);
                } else {
                    var direct = Scene.DirectLight(info.ray);
                    result = result.add(color.mul(direct.add(indirect)));
                }
            }
        }
        return result.divScalar(n * n);
    }

	static Shadow(SELF, r:Ray, light:Shape, max:number):boolean {
        var hit = Scene.Intersect(SELF, r);
        return hit.shape != light && hit.T < max;
    }

    static DirectLight(SELF, n:Ray):Color3 {
        let nLights = SELF.NumLights | 0;
        if (nLights == 0) {
            return new Color3();
        }
        var color = new Color3();
        var self = this;

        var i:number = 0;
        let lights = SELF.Lights;

        for (; i < nLights; i++) {
            let light = int32.Array.at(lights, i);
            var p = Vector3.RandomUnitVector()
            var d = p.sub(n.origin);
            var lr = new Ray(n.origin, d.normalize());
            var diffuse = lr.direction.dot(n.direction);
            if (diffuse <= 0) {
                continue
            }
            var distance = d.length();
            if (Scene.Shadow(lr, light, distance)) {
                continue;
            }
            let material = Material.MaterialAt(light, p);
            //var emittance = material.emittance;
            //var attenuation = 1;//material.attenuation.compute(distance);
            //color = color.add(light.getColor(p).mulScalar(diffuse * emittance * attenuation));
            let m = Material.Emittance(material) * diffuse;
            color = color.add(Color.MulScalar2(Material.Color(material), m));
        }

        /*this.lights.forEach(function (light:Shape) {
         var p = light.getRandomPoint();
         var d = p.sub(n.origin);
         var lr = new Ray(n.origin, d.normalize());
         var diffuse = lr.direction.dot(n.direction);
         if (diffuse <= 0) {
         return
         }
         var distance = d.length();
         if (self.shadow(lr, light, distance)) {
         return;
         }
         var material = light.getMaterial(p);
         var emittance = material.emittance;
         var attenuation = material.attenuation.compute(distance);
         color = color.add(light.getColor(p).mulScalar(diffuse * emittance * attenuation));
         });*/

        return color.divScalar(this.lights.length);
    }

} @end


export class MasterScene{

	color;
	shapes:IShape[];
	lights:IShape[];
	scenePtr:number;

	static defaultMaterial;

	constructor(color){
		this.color = color;
		this.scenePtr = Scene.NewScene(color);
        this.shapes = [];
        this.lights = [];

		// MasterScene.defaultMaterial = Material.GlossyMaterial(Color.HexColor(0xFF0000), 1.5, Utils.Radians(30));
        // MasterScene.defaultMaterial = Material.LightMaterial(Color.HexColor(0x00FF00), 5);
		//MasterScene.defaultMaterial = Material.DiffuseMaterial(Color.HexColor(0xFF0000));

	}
	setClearColor(color) {
		Color.HexColor(color, Scene.Color(this.scenePtr));
    }
	Clear(){
		this.scenePtr = Scene.NewScene(this.color);
		Scene.tree(this.scenePtr) = 0;
        this.shapes = [];
        this.lights = [];
	}
    AddDebugScene(){
        let wall = Material.GlossyMaterial(Color.HexColor(0xFCFAE1), 1.5, Utils.Radians(10));
        this.Add(Cube.NewCube(Vector.NewVector(-10, -1, -10), Vector.NewVector(-2, 10, 10), wall));
        this.Add(Cube.NewCube(Vector.NewVector(-10, -1, -10), Vector.NewVector(10, 0, 10), wall));
    }
	AddDefaultLights() {
		let light = Material.LightMaterial(Color.WHITE, 50);
        this.Add(Sphere.NewSphere(Vector.NewVector(0, 8, 0), 0.5, light));
	}
	Add(shape) {
		this.shapes.push(shape);

		if (Material.Emittance(Shape.MaterialAt(shape, Vector.ZERO)) > 0) {
			this.lights.push(shape);
		}
	}
	Commit(){
		Scene.NumShapes(this.scenePtr) = this.shapes.length;
		let shapeList = @new int32.Array(this.shapes.length);
        Scene.Shapes(this.scenePtr) = shapeList;
		Scene.NumLights(this.scenePtr) = this.lights.length;
		let lightList = @new int32.Array(this.lights.length);
        Scene.Lights(this.scenePtr) = lightList;

		this.shapes.forEach((shape, index) => {
            int32.Array.setAt(shapeList, index, shape);
		});

		this.lights.forEach((shape, index) => {
            int32.Array.setAt(lightList, index, shape);
		});

        // Scene.Compile(this.scenePtr);
	}
}