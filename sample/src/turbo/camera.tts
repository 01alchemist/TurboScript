@turbo class Camera {
	p:Vector
	u:Vector
	v:Vector
	w:Vector
	m:float64
	focalDistance :float64
	apertureRadius:float64

    @method init(SELF, p:number, u:number, v:number, w:number, m:number, focalDistance:number=0, apertureRadius:number=0){
        SELF.p = p;
        SELF.u = u;
        SELF.v = v;
        SELF.w = w;
        SELF.m = m;
        SELF.focalDistance = focalDistance;
        SELF.apertureRadius = apertureRadius;
        return SELF;
    }

    static cache;

    static NewCamera(p:number, u?:number, v?:number, w?:number, m?:number, focalDistance?:number, apertureRadius?:number){
        let ptr:number = @new Camera;
        p = p?p:Vector.NewVector();
        u = u?u:Vector.NewVector();
        v = v?v:Vector.NewVector();
        w = w?w:Vector.NewVector();
        m = m?m:Vector.NewVector();
        return Camera.init(ptr, p, u, v, w, m, focalDistance, apertureRadius);
    }

    static ToJSON(SELF){
        return {
            p:Vector.XYZ(SELF.p),
            u:Vector.XYZ(SELF.u),
            v:Vector.XYZ(SELF.v),
            w:Vector.XYZ(SELF.w),
            m:SELF.m,
            focalDistance:SELF.focalDistance,
            apertureRadius:SELF.apertureRadius
        };
    }

    static SetFromJSON(SELF, data){
        Vector.SetFromJSON(SELF.p, data.p);
        Vector.SetFromJSON(SELF.u, data.u);
        Vector.SetFromJSON(SELF.v, data.v);
        Vector.SetFromJSON(SELF.w, data.w);

        if(typeof data.m === "number")
            SELF.m = data.m;
        if(typeof data.focalDistance === "number")
            SELF.focalDistance = data.focalDistance;
        if(typeof data.apertureRadius === "number")
            SELF.apertureRadius = data.apertureRadius;
    }

    static LookAt(eye, center, up, fovy:number, c?:number):number {
        c = c?c:@new Camera;
        Camera.init(c);
        Camera.p(c) = eye;
        let w:number = Vector.Normalize_mem(Vector.Sub_mem(center, eye));
        Camera.w(c) = w;
        let u:number = Vector.Normalize_mem(Vector.Cross_mem(up, w));
        Camera.u(c) = u;
        Camera.v(c) = Vector.Normalize_mem(Vector.Cross_mem(w, u));
        Camera.m(c) = 1 / Math.tan(fovy*Math.PI/360);
        return c;
    }

    static SetFocus(c:number, focalPoint:number, apertureRadius:number) {
        Camera.focalDistance(c) = Vector.Length_mem(Vector.Sub_mem(focalPoint, Camera.p(c)));
        Camera.apertureRadius(c) = apertureRadius;
    }

    /* cached camera */
    /*static CastRay(c, x:number, y:number, w:number, h:number, u:number, v:number):number {

        if(!Camera.cache){
            Camera.cache = {
                apertureRadius: Camera.apertureRadius(c),
                focalDistance: Camera.focalDistance(c),
                u: new Vector3().read(Camera.u(c)),
                v: new Vector3().read(Camera.v(c)),
                p: new Vector3().read(Camera.p(c)),
                w: new Vector3().read(Camera.w(c)),
                m: Camera.m(c)
            }
        }
        c = Camera.cache;

        let aspect = w / h;
        let px = ((x+u-0.5)/(w-1))*2 - 1;
        let py = ((y+v-0.5)/(h-1))*2 - 1;



        let d = new Vector3();
        d = d.add(c.u.mulScalar(-px * aspect));
        d = d.add(c.v.mulScalar(-py));
        d = d.add(c.w.mulScalar(c.m));
        d = d.normalize();
        let p = c.p.clone();
        if (c.apertureRadius > 0) {
            let focalPoint = c.p.add(d.mulScalar(c.focalDistance));
            let angle = Math.random() * 2 * Math.PI;
            let radius = Math.random() * c.apertureRadius;

            p = p.add(c.u.mulScalar(Math.cos(angle) * radius));
            p = p.add(c.v.mulScalar(Math.sin(angle) * radius));
            d = focalPoint.sub(p).normalize();
        }
        return new Ray(p, d);
    }*/

    static CastRay(c:number, x:number, y:number, w:number, h:number, u:number, v:number):number {
        let aspect = w / h;
        let px = ((x+u-0.5)/(w-1))*2 - 1;
        let py = ((y+v-0.5)/(h-1))*2 - 1;

        let cu:Vector3 = new Vector3().read(Camera.u(c));
        let cv:Vector3 = new Vector3().read(Camera.v(c));
        let cp:Vector3 = new Vector3().read(Camera.p(c));
        let cw:Vector3 = new Vector3().read(Camera.w(c));

        let d = new Vector3();
        d = d.add(cu.mulScalar(-px * aspect));
        d = d.add(cv.mulScalar(-py));
        d = d.add(cw.mulScalar(Camera.m(c)));
        d = d.normalize();

        if (Camera.apertureRadius(c) > 0) {
            let focalPoint = cp.add(d.mulScalar(Camera.focalDistance(c)));
            let angle = Math.random() * 2 * Math.PI;
            let radius = Math.random() * Camera.apertureRadius(c);

            cp = cp.add(cu.mulScalar(Math.cos(angle) * radius));
            cp = cp.add(cv.mulScalar(Math.sin(angle) * radius));
            d = focalPoint.sub(cp).normalize();
        }
        return new Ray(cp, d);
    }

} @end