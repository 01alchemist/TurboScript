export class Color {
    r: float64;
    g: float64;
    b: float64;

    constructor(r: float64=0.0d, g: float64=0.0d, b: float64=0.0d): Color {
        this.r = r;
        this.g = g;
        this.b = b;
        return this;
    }

    set(r: float64, g: float64, b: float64): Color {
        this.r = r;
        this.g = g;
        this.b = b;
        return this;
    }

    static hexColor(hex: int32): Color {
        let r = ((hex >> 16) & 255 ) / 255;
        let g = ((hex >> 8) & 255) / 255;
        let b = (hex & 255) / 255;
        let c = new Color(
            r as float64,
            g as float64,
            b as float64
        );
        return c.pow(2.2d, c);
    }

    // static kelvin(K: int32): Color {
    //     var red: float64;
    //     var green: float64;
    //     var blue: float64;
    //     var a:float64 = 0.0;
    //     var b:float64 = 0.0;
    //     var c:float64 = 0.0;
    //     var x:float64 = 0.0;
    //     // red
    //     if (K >= 6600) {
    //         a = 351.97690566805693;
    //         b = 0.114206453784165;
    //         c = -40.25366309332127;
    //         x = (K / 100 - 55) as float64;
    //         red = a + b * x + c * Math.log(x);
    //     } else {
    //         red = 255;
    //     }
    //     // green
    //     if (K >= 6600) {
    //         a = 325.4494125711974;
    //         b = 0.07943456536662342;
    //         c = -28.0852963507957;
    //         x = (K / 100 - 50) as float64;
    //         green = a + b * x + c * Math.log(x);
    //     } else if (K >= 1000) {
    //         a = -155.25485562709179;
    //         b = -0.44596950469579133;
    //         c = 104.49216199393888;
    //         x = (K / 100 - 2) as float64;
    //         green = a + b * x + c * Math.log(x);
    //     } else {
    //         green = 0;
    //     }
    //     // blue
    //     if (K >= 6600) {
    //         blue = 255;
    //     } else if (K >= 2000) {
    //         a = -254.76935184120902;
    //         b = 0.8274096064007395;
    //         c = 115.67994401066147;
    //         x = (K / 100 - 10) as float64;
    //         blue = a + b * x + c * Math.log(x);
    //     } else {
    //         blue = 0;
    //     }
    //     red = Math.min(1, red / 255);
    //     green = Math.min(1, green / 255);
    //     blue = Math.min(1, blue / 255);
    //     return new Color(red, green, blue);
    // }

    // static FloatRGBA(this: float64): RGBA {
    //     return {
    //         r: Color.r(this),
    //         g: Color.g(this),
    //         b: Color.b(this),
    //         a: 1.0
    //     };
    // }
    //
    // static RGB(this: float64): RGB {
    //     let _d: Uint8ClampedArray = new Uint8ClampedArray([
    //         Color.r(this) * 255,
    //         Color.g(this) * 255,
    //         Color.b(this) * 255
    //     ]);
    //     return rgb(_d[0], _d[1], _d[2]);
    // }
    //
    // static RGBA(this: float64): RGBA {
    //     let _d: Uint8ClampedArray = new Uint8ClampedArray([
    //         Color.r(this) * 255,
    //         Color.g(this) * 255,
    //         Color.b(this) * 255
    //     ]);
    //     return {
    //         r: _d[0],
    //         g: _d[1],
    //         b: _d[2],
    //         a: 255
    //     };
    // }
    //
    // static RGBA64(this: float64): RGBA {
    //     return {
    //         r: Math.round(Math.max(0, Math.min(65535, Color.r(this) * 65535))),
    //         g: Math.round(Math.max(0, Math.min(65535, Color.g(this) * 65535))),
    //         b: Math.round(Math.max(0, Math.min(65535, Color.b(this) * 65535))),
    //         a: 65535
    //     };
    // }

    add(b:Color, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(this.r + b.r, this.g + b.g, this.b + b.b);
    }

    sub(b:Color, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(this.r - b.r, this.g - b.g, this.b - b.b);
    }

    mul(b:Color, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(this.r * b.r, this.g * b.g, this.b * b.b);
    }

    mulScalar(f:float64, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(this.r * f, this.g * f, this.b * f);
    }

    div(b:Color, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(this.r / b.r, this.g / b.g, this.b / b.b);
    }

    divScalar(f:float64, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(this.r / f, this.g / f, this.b / f);
    }

    min(b: Color, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(Math.min(this.r, b.r), Math.min(this.g, b.g), Math.min(this.b, b.b));
    }

    max(b: Color, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(Math.max(this.r, b.r), Math.max(this.g, b.g), Math.max(this.b, b.b));
    }

    minComponent(): float64 {
        return Math.min(Math.min(this.r, this.g), this.b);
    }

    maxComponent(): float64 {
        return Math.max(Math.max(this.r, this.g), this.b);
    }

    pow(f: float64, c:Color): Color {
        c = c != null ? c : new Color();
        return c.set(Math.pow(this.r, f), Math.pow(this.g, f), Math.pow(this.b, f));
    }

    mix(b: Color, pct: float64, c:Color): Color {
        c = this.mulScalar(1.0d - pct, c);
        let _b = b.mulScalar(pct, null);
        c = c.add(_b, c);
        delete _b;
        return c;
    }

    // isEqual(b: Color): boolean {
    //     return this.r == b.r && this.g == b.g && this.b == b.b;
    // }
    //
    // isBlack(): boolean {
    //     return this.isEqual(Color.BLACK);
    // }
    //
    // isWhite(): boolean {
    //     return this.isEqual(Color.WHITE);
    // }
    //
    // clone(): Color {
    //     return new Color(this.r, this.g, this.b);
    // }
    //
    // static get BLACK(): Color {
    //     return Color.hexColor(0x000000);
    // }
    //
    // static get WHITE(): Color {
    //     return Color.hexColor(0xFFFFFF);
    // }

    // static BrightColors = [
    //     Color.hexColor(0xFF00FF),
    //     Color.hexColor(0x84FF00),
    //     Color.hexColor(0xFF0084),
    //     Color.hexColor(0x00FFFF),
    //     Color.hexColor(0x00FF84),
    //     Color.hexColor(0xDD40FF),
    //     Color.hexColor(0xFFFF00)
    // ];
    //
    // static RGBAColors = [
    //     Color.hexColor(0xFF0000),
    //     Color.hexColor(0x00FF00),
    //     Color.hexColor(0x0000FF),
    //     Color.hexColor(0xFFFFFF)
    // ];
    //
    // static Random(): float64 {
    //     return new Color(Math.random(), Math.random(), Math.random());
    // }
    //
    // static random(): RGB {
    //     return rgb(Math.random(), Math.random(), Math.random());
    // }
    //
    // static RandomBrightColor(): float64 {
    //     var i: float64 = Math.round(Math.random() * Color.BrightColors.length);
    //     return Color.BrightColors[i];
    // }
    //
    // static RandomRGBAColor(): float64 {
    //     var i: float64 = Math.round(Math.random() * Color.RGBAColors.length);
    //     return Color.RGBAColors[i];
    // }

}
