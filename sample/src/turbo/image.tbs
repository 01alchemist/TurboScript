export class Image {

    width: int32;
    height: int32;
    depth: uint8;
    data: Array<uint8>;

    constructor(width: int32, height: int32, depth: int32) {

        this.width = width;
        this.height = height;
        this.depth = depth;
        let len = width * height * 4;
        this.data = new Array<uint8>(len);
    }

    pixOffset(x: int32, y: int32): int32 {
        return (y * (this.width * 4)) + (x * 4);
    }

    // getPixel32(x: int32, y: int32): Color {
    //     let i = this.pixOffset(x, y);
    //     return new Color(
    //         (this.data[i] / 255) as float64,
    //         (this.data[i + 1] / 255) as float64,
    //         (this.data[i + 2] / 255) as float64
    //     );
    // }
    //
    // getPixel64(x: int32, y: int32): Color {
    //     let i = this.pixOffset(x, y);
    //     return new Color(
    //         (this.data[i] / 65535) as float64,
    //         (this.data[i + 1] / 65535) as float64,
    //         (this.data[i + 2] / 65535) as float64
    //     );
    // }

    // setPixel32(x: int32, y: int32, c: Color): void {
    //     let i = this.pixOffset(x, y);
    //     this.data[i] = (c.r * 255.0d) as uint8;
    //     this.data[i + 1] = (c.g * 255.0d) as uint8;
    //     this.data[i + 2] = (c.b * 255.0d) as uint8;
    //     this.data[i + 3] = 255;
    // }

    // setPixel64(x: int32, y: int32, c: Color): void {
    //     let i = this.pixOffset(x, y);
    //     this.data[i] = c.r * 65535.0;
    //     this.data[i + 1] = c.g * 65535.0;
    //     this.data[i + 2] = c.b * 65535.0;
    //     this.data[i + 3] = 65535.0;
    // }

    setRaw(data:Array<uint8>): void {
        let i: int32 = 0;
        while (i < data.length) {
            this.data[i] = data[i];
            i = i + 1;
        }
    }
}