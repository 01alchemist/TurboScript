class Camera {
	p:Vector3;
	u:Vector3;
	v:Vector3;
	w:Vector3;
	m:float32;
	focalDistance :float32;
	apertureRadius:float32;

    constructor(p:Vector3, u:Vector3, v:Vector3, w:Vector3, m:float32=0.0, focalDistance:float32=0.0,
                apertureRadius:float32=0.0):Camera {
        this.p = p == null ? new Vector3() : p;
        this.u = u == null ? new Vector3() : u;
        this.v = v == null ? new Vector3() : v;
        this.w = w == null ? new Vector3() : w;
        this.m = m;
        this.focalDistance = focalDistance;
        this.apertureRadius = apertureRadius;
        return this;
    }

    // static ToJSON(this){
    //     return {
    //         p:Vector3.XYZ(this.p),
    //         u:Vector3.XYZ(this.u),
    //         v:Vector3.XYZ(this.v),
    //         w:Vector3.XYZ(this.w),
    //         m:this.m,
    //         focalDistance:this.focalDistance,
    //         apertureRadius:this.apertureRadius
    //     };
    // }
    //
    // static SetFromJSON(data){
    //     Vector3.SetFromJSON(this.p, data.p);
    //     Vector3.SetFromJSON(this.u, data.u);
    //     Vector3.SetFromJSON(this.v, data.v);
    //     Vector3.SetFromJSON(this.w, data.w);
    //
    //     if(typeof data.m === "float32")
    //         this.m = data.m;
    //     if(typeof data.focalDistance === "float32")
    //         this.focalDistance = data.focalDistance;
    //     if(typeof data.apertureRadius === "float32")
    //         this.apertureRadius = data.apertureRadius;
    // }

    static LookAt(eye:Vector3, center:Vector3, up:Vector3, fovy:float32, c:Camera):Camera {
        c = c == null ? new Camera() : c;
        c.p = eye;
        let w:Vector3 = center.sub(eye);
            w.normalize(w);
            c.w = w;
        let u:Vector3 = up.cross(w);
            u.normalize(u);
            c.u = u;
        let v = w.cross(u);
            v.normalize(v);
            c.v = v;
        c.m = 1.0 / Math.tan(fovy * PI / 360.0);
        return c;
    }

    setFocus(focalPoint:Vector3, apertureRadius:float32):void {
        let tmp1 = focalPoint.sub(this.p);
        this.focalDistance = tmp1.length();
        this.apertureRadius = apertureRadius;
        delete tmp1;
    }

    castRay(x:float32, y:float32, width:float32, height:float32, u:float32, v:float32):Ray {
        let aspect = width / height;
        let px = ((x+u - 0.5)/(width - 1.0)) * 2.0 - 1.0;
        let py = ((y+v - 0.5)/(height - 1.0)) * 2.0 - 1.0;

        let d = new Vector3();
        let tmp = new Vector3();
        d.add(this.u.mulScalar(-px * aspect, tmp), d);
        d.add(this.v.mulScalar(-py, tmp), d);
        d.add(this.w.mulScalar(this.m, tmp), d);
        d.normalize(d);
        let p;
        if (this.apertureRadius > 0) {
            let focalPoint = this.p.add(d.mulScalar(this.focalDistance, tmp));
            let angle = Math.random() * 2 * Math.PI;
            let radius = Math.random() * this.apertureRadius;

            p = this.p.add(this.u.mulScalar(Math.cos(angle) * radius, tmp));
            p.add(this.v.mulScalar(Math.sin(angle) * radius, tmp), p);
            d = focalPoint.sub(this.p, tmp).normalize(d);

            delete focalPoint;
            delete tmp;
        }
        return new Ray(p, d);
    }

}