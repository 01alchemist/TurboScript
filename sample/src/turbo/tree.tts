@turbo class Node{
    Axis:uint8
    Point:float64
    Shapes:int32
    NumShapes:int32
    Left:int32
    Right:int32

    @method init(SELF, axis:number, point:number, shapes:number, numShapes:number, left:number, right:number):number{
        SELF.Axis = axis;
        SELF.Point = point;
        SELF.Shapes = shapes;
        SELF.NumShapes = numShapes;
        SELF.Left = left;
        SELF.Right = right;
        return SELF;
    }

    static NewNode(shapes:number, numShapes:number):number {
        let ptr:number = @new Node;
        return Node.init(ptr, Axis.AxisNone, 0, shapes, numShapes, null, null);
    }

    static ToJSON(SELF){
        return{
            axis:Axis[SELF.Axis],
            point:SELF.Point,
            numShapes:SELF.NumShapes,
            left:SELF.Left,
            right:SELF.Right
        }
    }

    static Intersect(SELF, r:Ray, tmin:number, tmax:number):Hit {
        let tsplit:number;
        let leftFirst:boolean;

        switch (SELF.Axis) {
            case Axis.AxisNone:
                return Node.IntersectShapes(SELF, r);
            case Axis.AxisX:
                tsplit = (SELF.Point - r.origin.x) / r.direction.x;
                leftFirst = (r.origin.x < SELF.Point) || (r.origin.x == SELF.Point && r.direction.x <= 0);
                break;
            case Axis.AxisY:
                tsplit = (SELF.Point - r.origin.y) / r.direction.y;
                leftFirst = (r.origin.y < SELF.Point) || (r.origin.y == SELF.Point && r.direction.y <= 0);
                break;
            case Axis.AxisZ:
                tsplit = (SELF.Point - r.origin.z) / r.direction.z;
                leftFirst = (r.origin.z < SELF.Point) || (r.origin.z == SELF.Point && r.direction.z <= 0);
                break;
        }

        let first:number;
        let second:number;

        if (leftFirst) {
            first = SELF.Left;
            second = SELF.Right;
        } else {
            first = SELF.Right;
            second = SELF.Left;
        }

        if (tsplit > tmax || tsplit <= 0) {
            return Node.Intersect(first, r, tmin, tmax);
        } else if (tsplit < tmin) {
            return Node.Intersect(second, r, tmin, tmax);
        } else {
            let h1 = Node.Intersect(first, r, tmin, tsplit);
            if (h1.T <= tsplit) {
                return h1;
            }
            let h2 = Node.Intersect(second, r, tsplit, Math.min(tmax, h1.T));
            if (h1.T <= h2.T) {
                return h1;
            } else {
                return h2;
            }
        }
    }

    static IntersectShapes(SELF, r:Ray):Hit{
        let hit = Hit.NoHit;
        for(let i=0;i < SELF.NumShapes;i++) {
            let shape:number  = Shape.Array.at(SELF.Shapes, i);
            let h:Hit = Shape.Intersect(shape, r);
            if (h.T < hit.T) {
                hit = h;
            }
        }
        return hit;
    }

    static PartitionScore(SELF, axis:Axis, point:number):number {
        let left = 0;
        let right = 0;
        for(let i=0;i < SELF.NumShapes;i++) {
            let shape:number  = Shape.Array.at(SELF.Shapes, i);
            let box = Shape.BoundingBox(shape);
            // let box = Triangle.Box(shape);
            let lr = Box.Partition(box, axis, point);
            if (lr.left) {
                left++
            }
            if (lr.right) {
                right++
            }
        }
        if (left >= right) {
            return left;
        } else {
            return right;
        }
    }

    static Partition(SELF, size:number, axis:Axis, point:number):{left:number, numLeft:number, right:number, numRight:number} {/*Shape[]*/
        let left = [];
        let right = [];
        for(let i=0;i < SELF.NumShapes;i++) {
            let shape:number  = Shape.Array.at(SELF.Shapes, i);
            let box = Shape.BoundingBox(shape);
            let lr = Box.Partition(box, axis, point);
            if (lr.left) {
                left.push(shape);
            }
            if (lr.right) {
                right.push(shape);
            }
        }

        let left_ptr = @new int32.Array(left.length);
        let right_ptr = @new int32.Array(right.length);

        left.forEach((item, index) => {
           int32.Array.setAt(left_ptr, index, item);
        });

        right.forEach((item, index) => {
           int32.Array.setAt(right_ptr, index, item);
        });

        return {
            left:left_ptr, numLeft:left.length,
            right:right_ptr, numRight: right.length
        };
    }

    static Split(SELF, depth:number) {
        if ( SELF.NumShapes < 8) {
            return;
        }

        let size:number = SELF.NumShapes * 2;

        let _xs = new Float64Array(size);
        let _ys = new Float64Array(size);
        let _zs = new Float64Array(size);

        let count = 0;
        for(let i=0;i < SELF.NumShapes;i++) {
            let shape:number  = Shape.Array.at(SELF.Shapes, i);
            // let box = Shape.BoundingBox(shape);
            let box = Triangle.BoundingBox(shape);

            _xs[count] = Vector.x(Box.Min(box));
            _ys[count] = Vector.y(Box.Min(box));
            _zs[count] = Vector.z(Box.Min(box));
            count++;

            _xs[count] = Vector.x(Box.Max(box));
            _ys[count] = Vector.y(Box.Max(box));
            _zs[count] = Vector.z(Box.Max(box));
            count++;
        }

        _xs.sort();
        _ys.sort();
        _zs.sort();

        let mx = Utils.Median(_xs);
        let my = Utils.Median(_ys);
        let mz = Utils.Median(_zs);
        let best = Math.round(SELF.NumShapes * 0.85);
        let bestAxis = Axis.AxisNone;
        let bestPoint = 0.0;

        let sx = Node.PartitionScore(SELF, Axis.AxisX, mx);

        if (sx < best) {
            best = sx;
            bestAxis = Axis.AxisX;
            bestPoint = mx;
        }

        let sy = Node.PartitionScore(SELF, Axis.AxisY, my);
        if (sy < best) {
            best = sy;
            bestAxis = Axis.AxisY;
            bestPoint = my;
        }
        let sz = Node.PartitionScore(SELF, Axis.AxisZ, mz);
        if (sz < best) {
            best = sz;
            bestAxis = Axis.AxisZ;
            bestPoint = mz;
        }
        if (bestAxis == Axis.AxisNone) {
            return;
        }
        let lr = Node.Partition(SELF, best, bestAxis, bestPoint);
        SELF.Axis = bestAxis;
        SELF.Point = bestPoint;
        SELF.Left = Node.NewNode(lr.left, lr.numLeft);
        SELF.Right = Node.NewNode(lr.right, lr.numRight);
        Node.Split(SELF.Left, depth + 1);
        Node.Split(SELF.Right, depth + 1);
        SELF.Shapes = 0; // only needed at leaf nodes
    }
} @end

@turbo class Tree{
	Box:int32
	Root:int32

	@method init(SELF, box:number, root:number):number{
        SELF.Box = box;
        SELF.Root = root;
        return SELF;
    }

    static NewTree(shapes:number):number {
        let numShapes = Shape.Array.len(shapes);
        console.log(`Building k-d tree (${numShapes} shapes)... `);
        // console.time("Tree:BuildingBox");
        let box = Box.BoxForShapes(shapes, numShapes);
        // console.timeEnd("Tree:BuildingBox");
        let node = Node.NewNode(shapes, numShapes);
        // console.time("Node:Split");
        Node.Split(node, 0);
        // console.timeEnd("Node:Split");
        let ptr:number = @new Tree;
        return Tree.init(ptr, box, node);
    }

    static Intersect(tree:number, r:number):Hit {
        let hit = Box.Intersect(Tree.Box(tree), r);
        if (hit.tmax < hit.tmin || hit.tmax <= 0) {
            return Hit.NoHit;
        }
        return Node.Intersect(Tree.Root(tree), r, hit.tmin, hit.tmax);
    }
} @end

