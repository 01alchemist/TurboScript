import {randomFloat32} from "../../../src/library/asmjs/random.tbs";

export class Vector3 {
    x: float32;
    y: float32;
    z: float32;

    constructor(x: float32, y: float32, z: float32) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    isEqual(b: Vector3): boolean {
        return this.x == b.x && this.y == b.y && this.z == b.z;
    }

    isZero(): boolean {
        let r = this.x == 0.0 && this.y == 0.0 && this.z == 0.0;
        return r;
    }

    set(x: float32, y: float32, z: float32): Vector3 {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }

    // setFromVector3(d: Vector3): Vector3 {
    //     this.x = d.x;
    //     this.y = d.y;
    //     this.z = d.z;
    //     return this;
    // }

    copy(src: Vector3): Vector3 {
        this.x = src.x;
        this.y = src.y;
        this.z = src.z;
        return this;
    }

    clone(): Vector3 {
        return new Vector3(this.x, this.y, this.z);
    }

    // setFromArray(d:float32[]) {
    // this.x = d[0];
    // this.y = d[1];
    // this.z = d[2];
    // return this;
    // }

    length(): float32 {
        return sqrtf32(
            (this.x * this.x) + (this.y * this.y) + (this.z * this.z)
        ) as float32;
    }

    lengthN(n: float32): float32 {
        if (n == 2.0) {
            return this.length();
        }
        let a = this.abs(null);
        let p1 = powf32(a.x, n);
        let p2 = powf32(a.y, n);
        let p3 = powf32(a.z, n);
        let xyz = p1 + p2 + p3;
        let length: float32 = powf32(xyz, (1.0 as float32) / n) as float32;
        delete a;
        return length;
    }

    dot(b: Vector3): float32 {
        return (this.x * b.x) + (this.y * b.y) + (this.z * b.z);
    }

    cross(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set((this.y * b.z) - (this.z * b.y), (this.z * b.x) - (this.x * b.z), (this.x * b.y) - (this.y * b.x));
    }

    normalize(c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        let d: float32 = this.length();
        return c.set(this.x / d, this.y / d, this.z / d);
    }

    // negate(c:Vector3): Vector3 {
    //     c = c != null ? c : new Vector3(0.0,0.0,0.0);
    //     return c.set(-this.x, -this.y, -this.z);
    // }

    abs(c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(absf32(this.x), absf32(this.y), absf32(this.z));
    }

    add(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(this.x + b.x, this.y + b.y, this.z + b.z);
    }

    sub(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(this.x - b.x, this.y - b.y, this.z - b.z);
    }

    mul(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set((this.x * b.x) as float32, (this.y * b.y) as float32, (this.z * b.z) as float32);
    }

    div(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(this.x / b.x, this.y / b.y, this.z / b.z);
    }

    // as implemented in GLSL
    mod(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(this.x - b.x * Math.floor(this.x / b.x), this.y - b.y * Math.floor(this.y / b.y), this.z - b.z * Math.floor(this.z / b.z));
    }

    addScalar(f: float32, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(this.x + f, this.y + f, this.z + f);
    }

    subScalar(f: float32, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(this.x - f, this.y - f, this.z - f);
    }

    mulScalar(f: float32, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set((this.x * f) as float32, (this.y * f) as float32, (this.z * f) as float32);
    }

    divScalar(f: float32, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(this.x / f, this.y / f, this.z / f);
    }

    min(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(
            minf32(this.x, b.x) as float32,
            minf32(this.y, b.y) as float32,
            minf32(this.z, b.z) as float32
        );
    }

    max(b: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(
            maxf32(this.x, b.x) as float32,
            maxf32(this.y, b.y) as float32,
            maxf32(this.z, b.z) as float32
        );
    }

    minAxis(a: Vector3, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);

        let x: float32 = absf32(this.x);
        let y: float32 = absf32(this.y);
        let z: float32 = absf32(this.z);
        if (x <= y && x <= z) {
            return c.set(1.0, 0.0, 0.0);
        } else if (y <= x && y <= z) {
            return c.set(0.0, 1.0, 0.0);
        }
        return c.set(0.0, 0.0, 1.0);
    }

    minComponent(a: Vector3): float32 {
        return minf32(minf32(this.x, this.y), this.z) as float32;
    }

    maxComponent(a: Vector3): float32 {
        return maxf32(maxf32(this.x, this.y), this.z) as float32;
    }

    reflect(b: Vector3, c:Vector3): Vector3 {
        c = this.mulScalar((2.0 * this.dot(b)) as float32, c);
        return b.sub(c, c);
    }

    refract(b: Vector3, n1: float32, n2: float32, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        let nr: float32 = n1 / n2;
        let cosI: float32 = -this.dot(b);
        let sinT2: float32 = nr * nr * (1.0 - cosI * cosI);
        if (sinT2 > 1.0) {
            return c.set(0.0, 0.0, 0.0);
        }
        let cosT: float32 = sqrtf32(1.0 - sinT2);
        b.mulScalar(nr, c);
        let tmp1 = this.mulScalar(nr * (cosI - cosT), null);
        c.add(tmp1, c);

        delete tmp1;

        return c;
    }

    reflectance(b: Vector3, n1: float32, n2: float32): float32 {
        let nr: float32 = n1 / n2;
        let cosI: float32 = -this.dot(b);
        let sinT2: float32 = nr * nr * (1.0 - cosI * cosI);
        if (sinT2 > 1.0) {
            return 1.0;
        }
        let cosT: float32 = sqrtf32(1.0 - sinT2);
        let rOrth: float32 = (n1 * cosI - n2 * cosT) / (n1 * cosI + n2 * cosT);
        let rPar: float32 = (n2 * cosI - n1 * cosT) / (n2 * cosI + n1 * cosT);
        return (rOrth * rOrth + rPar * rPar) / 2.0;
    }

    pow(f: float32, c:Vector3): Vector3 {
        c = c != null ? c : new Vector3(0.0,0.0,0.0);
        return c.set(
            powf32(this.x, f) as float32,
            powf32(this.y, f) as float32,
            powf32(this.z, f) as float32
        );
    }
}

export function randomUnitVector3(c:Vector3 = null): Vector3 {
    let x = randomFloat32() * 2.0 - 1.0;
    let y = randomFloat32() * 2.0 - 1.0;
    let z = randomFloat32() * 2.0 - 1.0;
    while (x * x + y * y + z * z > 1.0) {
        x = randomFloat32() * 2.0 - 1.0;
        y = randomFloat32() * 2.0 - 1.0;
        z = randomFloat32() * 2.0 - 1.0;
    }
    c = c != null ? c : new Vector3(0.0,0.0,0.0);
    c.set(x, y, z);
    return c.normalize(c);
}

var ZERO: Vector3 = new Vector3(0.0, 0.0, 0.0);
var ONE: Vector3 = new Vector3(1.0, 1.0, 1.0);
var NegativeONE: Vector3 = new Vector3(-1.0, -1.0, -1.0);