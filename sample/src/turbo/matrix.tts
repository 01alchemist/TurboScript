@turbo class Matrix{

    x00:float64
    x01:float64
    x02:float64
    x03:float64

    x10:float64
    x11:float64
    x12:float64
    x13:float64

    x20:float64
    x21:float64
    x22:float64
    x23:float64

    x30:float64
    x31:float64
    x32:float64
    x33:float64

    @method init(SELF:number=0, x00:number=0, x01:number=0, x02:number=0, x03:number=0, x10:number=0, x11:number=0, x12:number=0, x13:number=0, x20:number=0, x21:number=0, x22:number=0, x23:number=0, x30:number=0, x31:number=0, x32:number=0, x33:number=0) {
        SELF.x00 = x00;
        SELF.x01 = x01;
        SELF.x02 = x02;
        SELF.x03 = x03;
        SELF.x10 = x10;
        SELF.x11 = x11;
        SELF.x12 = x12;
        SELF.x13 = x13;
        SELF.x20 = x20;
        SELF.x21 = x21;
        SELF.x22 = x22;
        SELF.x23 = x23;
        SELF.x30 = x30;
        SELF.x31 = x31;
        SELF.x32 = x32;
        SELF.x33 = x33;
        return SELF;
    }

    static NewMatrix(x00?:number, x01?:number, x02?:number, x03?:number, x10?:number, x11?:number, x12?:number, x13?:number, x20?:number, x21?:number, x22?:number, x23?:number, x30?:number, x31?:number, x32?:number, x33?:number):number {
        let ptr:number = @new Matrix;
        return Matrix.init(ptr,
            x00, x01, x02, x03,
            x10, x11, x12, x13,
            x20, x21, x22, x23,
            x30, x31, x32, x33
        )
    }

    static fromTHREEJS(e:number[]):number {

        return Matrix.NewMatrix(
            e[0], e[4], e[8], e[12],
            e[1], e[5], e[9], e[13],
            e[2], e[6], e[10], e[14],
            e[3], e[7], e[11], e[15]
        );
    }

    static DATA(SELF:number) {
        return [
            SELF.x00, SELF.x01, SELF.x02, SELF.x03,
            SELF.x10, SELF.x11, SELF.x12, SELF.x13,
            SELF.x20, SELF.x21, SELF.x22, SELF.x23,
            SELF.x30, SELF.x31, SELF.x32, SELF.x33
        ]
    }

    static Identity(c?:number):number {
        let ptr:number = c?c:@new Matrix;
        return Matrix.init(ptr,
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )
    }

    static IsEqual(a:number, b:number):boolean {
        return Matrix.x00(a) == Matrix.x00(b) && Matrix.x01(a) == Matrix.x01(b) && Matrix.x02(a) == Matrix.x02(b) && Matrix.x03(a) == Matrix.x03(b) && Matrix.x10(a) == Matrix.x10(b) && Matrix.x11(a) == Matrix.x11(b) && Matrix.x12(a) == Matrix.x12(b) && Matrix.x13(a) == Matrix.x13(b) && Matrix.x20(a) == Matrix.x20(b) && Matrix.x21(a) == Matrix.x21(b) && Matrix.x22(a) == Matrix.x22(b) && Matrix.x23(a) == Matrix.x23(b) && Matrix.x30(a) == Matrix.x30(b) && Matrix.x31(a) == Matrix.x31(b) && Matrix.x32(a) == Matrix.x32(b) && Matrix.x33(a) == Matrix.x33(b);
    }

    static IsIdentity(a:number):boolean {
        return Matrix.x00(a) == 1 && Matrix.x01(a) == 0 && Matrix.x02(a) == 0 && Matrix.x03(a) == 0 && Matrix.x10(a) == 0 && Matrix.x11(a) == 1 && Matrix.x12(a) == 0 && Matrix.x13(a) == 0 && Matrix.x20(a) == 0 && Matrix.x21(a) == 0 && Matrix.x22(a) == 1 && Matrix.x23(a) == 0 && Matrix.x30(a) == 0 && Matrix.x31(a) == 0 && Matrix.x32(a) == 0 && Matrix.x33(a) == 1;
    }

    static TranslateUnitMatrix(v:number, c?:number):number{
        let ptr:number = c?c:@new Matrix;
        return Matrix.init(ptr,
            1, 0, 0, Vector.x(v),
            0, 1, 0, Vector.y(v),
            0, 0, 1, Vector.z(v),
            0, 0, 0, 1
        )
    }

    static ScaleUnitMatrix(v:number, c?:number):number{
        let ptr:number = c?c:@new Matrix;
        return Matrix.init(ptr,
            Vector.x(v), 0, 0, 0,
            0, Vector.y(v), 0, 0,
            0, 0, Vector.z(v), 0,
            0, 0, 0, 1
        )
    }

    static RotateUnitMatrix(v:number, a:number, _c?:number):number{

        v = Vector.Normalize_mem(v);
        let s:number = Math.sin(a);
        let c:number = Math.cos(a);
        let m:number = 1 - c;

        let ptr:number = _c?_c:@new Matrix;
        return Matrix.init(ptr,
            m*Vector.x(v) * Vector.x(v) + c, m * Vector.x(v) * Vector.y(v) + Vector.z(v) * s, m * Vector.z(v) * Vector.x(v) - Vector.y(v) * s, 0,
            m*Vector.x(v) * Vector.y(v) - Vector.z(v) * s, m*Vector.y(v) * Vector.y(v) + c, m*Vector.y(v) * Vector.z(v) + Vector.x(v) * s, 0,
            m*Vector.z(v) * Vector.x(v) + Vector.y(v) * s, m*Vector.y(v) * Vector.z(v) - Vector.x(v) * s, m*Vector.z(v) * Vector.z(v) + c, 0,
            0, 0, 0, 1
        )
    }

    static FrustumUnitMatrix(l:number, r:number, b:number, t:number, n:number, f:number, c?:number):number{

        let t1:number = 2 * n;
        let t2:number = r - l;
        let t3:number = t - b;
        let t4:number = f - n;

        let ptr:number = c?c:@new Matrix;
        return Matrix.init(ptr,
            t1 / t2, 0, (r + l) / t2, 0,
            0, t1 / t3, (t + b) / t3, 0,
            0, 0, (-f - n) / t4, (-t1 * f) / t4,
            0, 0, -1, 0
        )
    }

    static OrthographicUnitMatrix(l:number, r:number, b:number, t:number, n:number, f:number, c?:number):number{

        let ptr:number = c?c:@new Matrix;
        return Matrix.init(ptr,
            2 / (r - l), 0, 0, -(r + l) / (r - l),
            0, 2 / (t - b), 0, -(t + b) / (t - b),
            0, 0, -2 / (f - n), -(f + n) / (f - n),
            0, 0, 0, 1
        )
    }

    static PerspectiveUnitMatrix(fovy:number, aspect:number, near:number, far:number, c?:number):number {
        let ymax:number = near * Math.tan(fovy * Math.PI/360);
        let xmax:number = ymax * aspect;
        return Matrix.Frustum(-xmax, xmax, -ymax, ymax, near, far, c);
    }

    static LookAtMatrix(eye:number, center:number, up:number, c?:number):number{
        up = Vector.Normalize_mem(up);
        let f:number = Vector.Normalize_mem(Vector.Sub_mem(center, eye));
        let s:number = Vector.Normalize_mem(Vector.Cross_mem(f, up));
        let u:number = Vector.Cross_mem(s,f);

        let ptr:number = c?c:@new Matrix;
        Matrix.init(ptr,
            Vector.x(s), Vector.x(u), Vector.x(f), 0,
            Vector.y(s), Vector.y(u), Vector.y(f), 0,
            Vector.z(s), Vector.z(u), Vector.z(f), 0,
            0, 0, 0, 1
        );
        return Matrix.Translate(Matrix.Inverse(Matrix.Transpose(ptr, ptr), ptr), eye, ptr);
    }
    
    static Translate(m:number, v:number, c?:number):number {
        return Matrix.Mul(m, Matrix.TranslateUnitMatrix(v), c);
    }

    static Scale(m:number, v:number, c?:number):number{
        return Matrix.Mul(m, Matrix.ScaleUnitMatrix(v), c);
    }

    static Rotate(m:number, v:number, a:number, c?:number):number {
        return Matrix.Mul(m, Matrix.RotateUnitMatrix(v, a), c);
    }

    static Frustum(m:number, l:number, r:number, b:number, t:number, n:number, f:number, c?:number):number {
        return Matrix.Mul(m, Matrix.FrustumUnitMatrix(l, r, b, t, n, f, c), c);
    }

    static Orthographic(m:number, l:number, r:number, b:number, t:number, n:number, f:number, c?:number):number {
        return Matrix.Mul(m, Matrix.OrthographicUnitMatrix(l, r, b, t, n, f, c), c);
    }

    static Perspective(m:number, fovy:number, aspect:number, near:number, far:number, c?:number):number {
        return Matrix.Mul(m, Matrix.PerspectiveUnitMatrix(fovy, aspect, near, far, c), c);
    }

    static Mul(a:number, b:number, m?:number):number{
        m = m?m:@new Matrix;
        Matrix.x00(m) = Matrix.x00(a) * Matrix.x00(b) + Matrix.x01(a) * Matrix.x10(b) + Matrix.x02(a) * Matrix.x20(b) + Matrix.x03(a) * Matrix.x30(b);
        Matrix.x10(m) = Matrix.x10(a) * Matrix.x00(b) + Matrix.x11(a) * Matrix.x10(b) + Matrix.x12(a) * Matrix.x20(b) + Matrix.x13(a) * Matrix.x30(b);
        Matrix.x20(m) = Matrix.x20(a) * Matrix.x00(b) + Matrix.x21(a) * Matrix.x10(b) + Matrix.x22(a) * Matrix.x20(b) + Matrix.x23(a) * Matrix.x30(b);
        Matrix.x30(m) = Matrix.x30(a) * Matrix.x00(b) + Matrix.x31(a) * Matrix.x10(b) + Matrix.x32(a) * Matrix.x20(b) + Matrix.x33(a) * Matrix.x30(b);
        Matrix.x01(m) = Matrix.x00(a) * Matrix.x01(b) + Matrix.x01(a) * Matrix.x11(b) + Matrix.x02(a) * Matrix.x21(b) + Matrix.x03(a) * Matrix.x31(b);
        Matrix.x11(m) = Matrix.x10(a) * Matrix.x01(b) + Matrix.x11(a) * Matrix.x11(b) + Matrix.x12(a) * Matrix.x21(b) + Matrix.x13(a) * Matrix.x31(b);
        Matrix.x21(m) = Matrix.x20(a) * Matrix.x01(b) + Matrix.x21(a) * Matrix.x11(b) + Matrix.x22(a) * Matrix.x21(b) + Matrix.x23(a) * Matrix.x31(b);
        Matrix.x31(m) = Matrix.x30(a) * Matrix.x01(b) + Matrix.x31(a) * Matrix.x11(b) + Matrix.x32(a) * Matrix.x21(b) + Matrix.x33(a) * Matrix.x31(b);
        Matrix.x02(m) = Matrix.x00(a) * Matrix.x02(b) + Matrix.x01(a) * Matrix.x12(b) + Matrix.x02(a) * Matrix.x22(b) + Matrix.x03(a) * Matrix.x32(b);
        Matrix.x12(m) = Matrix.x10(a) * Matrix.x02(b) + Matrix.x11(a) * Matrix.x12(b) + Matrix.x12(a) * Matrix.x22(b) + Matrix.x13(a) * Matrix.x32(b);
        Matrix.x22(m) = Matrix.x20(a) * Matrix.x02(b) + Matrix.x21(a) * Matrix.x12(b) + Matrix.x22(a) * Matrix.x22(b) + Matrix.x23(a) * Matrix.x32(b);
        Matrix.x32(m) = Matrix.x30(a) * Matrix.x02(b) + Matrix.x31(a) * Matrix.x12(b) + Matrix.x32(a) * Matrix.x22(b) + Matrix.x33(a) * Matrix.x32(b);
        Matrix.x03(m) = Matrix.x00(a) * Matrix.x03(b) + Matrix.x01(a) * Matrix.x13(b) + Matrix.x02(a) * Matrix.x23(b) + Matrix.x03(a) * Matrix.x33(b);
        Matrix.x13(m) = Matrix.x10(a) * Matrix.x03(b) + Matrix.x11(a) * Matrix.x13(b) + Matrix.x12(a) * Matrix.x23(b) + Matrix.x13(a) * Matrix.x33(b);
        Matrix.x23(m) = Matrix.x20(a) * Matrix.x03(b) + Matrix.x21(a) * Matrix.x13(b) + Matrix.x22(a) * Matrix.x23(b) + Matrix.x23(a) * Matrix.x33(b);
        Matrix.x33(m) = Matrix.x30(a) * Matrix.x03(b) + Matrix.x31(a) * Matrix.x13(b) + Matrix.x32(a) * Matrix.x23(b) + Matrix.x33(a) * Matrix.x33(b);
        return m;
    }

    static MulPosition(a:number, b:number, c?:number):number {
        let x:number = Matrix.x00(a) * Vector.x(b) + Matrix.x01(a) * Vector.y(b) + Matrix.x02(a) * Vector.z(b) + Matrix.x03(a);
        let y:number = Matrix.x10(a) * Vector.x(b) + Matrix.x11(a) * Vector.y(b) + Matrix.x12(a) * Vector.z(b) + Matrix.x13(a);
        let z:number = Matrix.x20(a) * Vector.x(b) + Matrix.x21(a) * Vector.y(b) + Matrix.x22(a) * Vector.z(b) + Matrix.x23(a);
        let ptr:number = c?c:@new Vector();
        return Vector.Init_mem(ptr, x, y, z);
    }

    static MulPosition_vec3(a:number, b:Vector3):Vector3 {
        let x:number = Matrix.x00(a) * b.x + Matrix.x01(a) * b.y + Matrix.x02(a) * b.z + Matrix.x03(a);
        let y:number = Matrix.x10(a) * b.x + Matrix.x11(a) * b.y + Matrix.x12(a) * b.z + Matrix.x13(a);
        let z:number = Matrix.x20(a) * b.x + Matrix.x21(a) * b.y + Matrix.x22(a) * b.z + Matrix.x23(a);
        return new Vector3(x, y, z);
    }

    static MulDirection(a:number, b:number, c?:number):number {
        let x:number = Matrix.x00(a) * Vector.x(b) + Matrix.x01(a) * Vector.y(b) + Matrix.x02(a) * Vector.z(b);
        let y:number = Matrix.x10(a) * Vector.x(b) + Matrix.x11(a) * Vector.y(b) + Matrix.x12(a) * Vector.z(b);
        let z:number = Matrix.x20(a) * Vector.x(b) + Matrix.x21(a) * Vector.y(b) + Matrix.x22(a) * Vector.z(b);
        let ptr:number = c?c:@new Vector;
        return Vector.Normalize_mem(Vector.Init_mem(ptr, x, y, z));
    }

    static MulDirection_vec3(a:number, b:Vector3):Vector3 {
        let x:number = Matrix.x00(a) * b.x + Matrix.x01(a) * b.y + Matrix.x02(a) * b.z;
        let y:number = Matrix.x10(a) * b.x + Matrix.x11(a) * b.y + Matrix.x12(a) * b.z;
        let z:number = Matrix.x20(a) * b.x + Matrix.x21(a) * b.y + Matrix.x22(a) * b.z;
        return new Vector3(x, y, z).normalize();
    }

    static MulRay(a:number, ray:Ray):Ray {
        let origin:Vector3 = Matrix.MulPosition_vec3(a, ray.origin);
        let direction:Vector3 = Matrix.MulDirection_vec3(a, ray.direction);
        return new Ray(origin, direction);
    }

    static  MulBox(a:number, box:number, c?:number):number {
        let min:number = Box.Min(box);
        let max:number = Box.Max(box);
        // http://dev.theomader.com/transform-bounding-boxes/
        let r:number = Vector.Init_mem(@new Vector, Matrix.x00(a), Matrix.x10(a), Matrix.x20(a));
        let u:number = Vector.Init_mem(@new Vector, Matrix.x01(a), Matrix.x11(a), Matrix.x21(a));
        let b:number = Vector.Init_mem(@new Vector, Matrix.x02(a), Matrix.x12(a), Matrix.x22(a));
        let t:number = Vector.Init_mem(@new Vector, Matrix.x03(a), Matrix.x13(a), Matrix.x23(a));
        let xa:number = Vector.MulScalar_mem(r, Vector.x(min));
        let xb:number = Vector.MulScalar_mem(r, Vector.x(max));
        let ya:number = Vector.MulScalar_mem(u, Vector.y(min));
        let yb:number = Vector.MulScalar_mem(u, Vector.y(max));
        let za:number = Vector.MulScalar_mem(b, Vector.z(min));
        let zb:number = Vector.MulScalar_mem(b, Vector.z(max));
        xa = Vector.Min_mem(xa, xb, r);
        xb = Vector.Max_mem(xa, xb, u);
        ya = Vector.Min_mem(ya, yb, b);
        yb = Vector.Max_mem(ya, yb);
        za = Vector.Min_mem(za, zb);
        zb = Vector.Max_mem(za, zb);
        min = Vector.Add_mem(Vector.Add_mem(Vector.Add_mem(xa, ya), za),t);
        max = Vector.Add_mem(Vector.Add_mem(Vector.Add_mem(xb, yb), zb),t);
        let ptr = c?c:@new Box;
        return Box.Init_mem(ptr, min, max);
    }

    static Transpose(a:number, c?:number):number {
        let ptr = c?c:@new Matrix;
        return Matrix.init(ptr,
            Matrix.x00(a), Matrix.x10(a), Matrix.x20(a), Matrix.x30(a),
            Matrix.x01(a), Matrix.x11(a), Matrix.x21(a), Matrix.x31(a),
            Matrix.x02(a), Matrix.x12(a), Matrix.x22(a), Matrix.x32(a),
            Matrix.x03(a), Matrix.x13(a), Matrix.x23(a), Matrix.x33(a)
        );
    }

    static Determinant(SELF:number):number {
        return (SELF.x00*SELF.x11*SELF.x22*SELF.x33 - SELF.x00*SELF.x11*SELF.x23*SELF.x32 +
        SELF.x00*SELF.x12*SELF.x23*SELF.x31 - SELF.x00*SELF.x12*SELF.x21*SELF.x33 +
        SELF.x00*SELF.x13*SELF.x21*SELF.x32 - SELF.x00*SELF.x13*SELF.x22*SELF.x31 -
        SELF.x01*SELF.x12*SELF.x23*SELF.x30 + SELF.x01*SELF.x12*SELF.x20*SELF.x33 -
        SELF.x01*SELF.x13*SELF.x20*SELF.x32 + SELF.x01*SELF.x13*SELF.x22*SELF.x30 -
        SELF.x01*SELF.x10*SELF.x22*SELF.x33 + SELF.x01*SELF.x10*SELF.x23*SELF.x32 +
        SELF.x02*SELF.x13*SELF.x20*SELF.x31 - SELF.x02*SELF.x13*SELF.x21*SELF.x30 +
        SELF.x02*SELF.x10*SELF.x21*SELF.x33 - SELF.x02*SELF.x10*SELF.x23*SELF.x31 +
        SELF.x02*SELF.x11*SELF.x23*SELF.x30 - SELF.x02*SELF.x11*SELF.x20*SELF.x33 -
        SELF.x03*SELF.x10*SELF.x21*SELF.x32 + SELF.x03*SELF.x10*SELF.x22*SELF.x31 -
        SELF.x03*SELF.x11*SELF.x22*SELF.x30 + SELF.x03*SELF.x11*SELF.x20*SELF.x32 -
        SELF.x03*SELF.x12*SELF.x20*SELF.x31 + SELF.x03*SELF.x12*SELF.x21*SELF.x30)
    }

    static Inverse(SELF:number, c?:number):number {
        let m:number = c?c:@new Matrix;
        let d:number = Matrix.Determinant(SELF);
        Matrix.x00(m) = (SELF.x12*SELF.x23*SELF.x31 - SELF.x13*SELF.x22*SELF.x31 + SELF.x13*SELF.x21*SELF.x32 - SELF.x11*SELF.x23*SELF.x32 - SELF.x12*SELF.x21*SELF.x33 + SELF.x11*SELF.x22*SELF.x33) / d
        Matrix.x01(m) = (SELF.x03*SELF.x22*SELF.x31 - SELF.x02*SELF.x23*SELF.x31 - SELF.x03*SELF.x21*SELF.x32 + SELF.x01*SELF.x23*SELF.x32 + SELF.x02*SELF.x21*SELF.x33 - SELF.x01*SELF.x22*SELF.x33) / d
        Matrix.x02(m) = (SELF.x02*SELF.x13*SELF.x31 - SELF.x03*SELF.x12*SELF.x31 + SELF.x03*SELF.x11*SELF.x32 - SELF.x01*SELF.x13*SELF.x32 - SELF.x02*SELF.x11*SELF.x33 + SELF.x01*SELF.x12*SELF.x33) / d
        Matrix.x03(m) = (SELF.x03*SELF.x12*SELF.x21 - SELF.x02*SELF.x13*SELF.x21 - SELF.x03*SELF.x11*SELF.x22 + SELF.x01*SELF.x13*SELF.x22 + SELF.x02*SELF.x11*SELF.x23 - SELF.x01*SELF.x12*SELF.x23) / d
        Matrix.x10(m) = (SELF.x13*SELF.x22*SELF.x30 - SELF.x12*SELF.x23*SELF.x30 - SELF.x13*SELF.x20*SELF.x32 + SELF.x10*SELF.x23*SELF.x32 + SELF.x12*SELF.x20*SELF.x33 - SELF.x10*SELF.x22*SELF.x33) / d
        Matrix.x11(m) = (SELF.x02*SELF.x23*SELF.x30 - SELF.x03*SELF.x22*SELF.x30 + SELF.x03*SELF.x20*SELF.x32 - SELF.x00*SELF.x23*SELF.x32 - SELF.x02*SELF.x20*SELF.x33 + SELF.x00*SELF.x22*SELF.x33) / d
        Matrix.x12(m) = (SELF.x03*SELF.x12*SELF.x30 - SELF.x02*SELF.x13*SELF.x30 - SELF.x03*SELF.x10*SELF.x32 + SELF.x00*SELF.x13*SELF.x32 + SELF.x02*SELF.x10*SELF.x33 - SELF.x00*SELF.x12*SELF.x33) / d
        Matrix.x13(m) = (SELF.x02*SELF.x13*SELF.x20 - SELF.x03*SELF.x12*SELF.x20 + SELF.x03*SELF.x10*SELF.x22 - SELF.x00*SELF.x13*SELF.x22 - SELF.x02*SELF.x10*SELF.x23 + SELF.x00*SELF.x12*SELF.x23) / d
        Matrix.x20(m) = (SELF.x11*SELF.x23*SELF.x30 - SELF.x13*SELF.x21*SELF.x30 + SELF.x13*SELF.x20*SELF.x31 - SELF.x10*SELF.x23*SELF.x31 - SELF.x11*SELF.x20*SELF.x33 + SELF.x10*SELF.x21*SELF.x33) / d
        Matrix.x21(m) = (SELF.x03*SELF.x21*SELF.x30 - SELF.x01*SELF.x23*SELF.x30 - SELF.x03*SELF.x20*SELF.x31 + SELF.x00*SELF.x23*SELF.x31 + SELF.x01*SELF.x20*SELF.x33 - SELF.x00*SELF.x21*SELF.x33) / d
        Matrix.x22(m) = (SELF.x01*SELF.x13*SELF.x30 - SELF.x03*SELF.x11*SELF.x30 + SELF.x03*SELF.x10*SELF.x31 - SELF.x00*SELF.x13*SELF.x31 - SELF.x01*SELF.x10*SELF.x33 + SELF.x00*SELF.x11*SELF.x33) / d
        Matrix.x23(m) = (SELF.x03*SELF.x11*SELF.x20 - SELF.x01*SELF.x13*SELF.x20 - SELF.x03*SELF.x10*SELF.x21 + SELF.x00*SELF.x13*SELF.x21 + SELF.x01*SELF.x10*SELF.x23 - SELF.x00*SELF.x11*SELF.x23) / d
        Matrix.x30(m) = (SELF.x12*SELF.x21*SELF.x30 - SELF.x11*SELF.x22*SELF.x30 - SELF.x12*SELF.x20*SELF.x31 + SELF.x10*SELF.x22*SELF.x31 + SELF.x11*SELF.x20*SELF.x32 - SELF.x10*SELF.x21*SELF.x32) / d
        Matrix.x31(m) = (SELF.x01*SELF.x22*SELF.x30 - SELF.x02*SELF.x21*SELF.x30 + SELF.x02*SELF.x20*SELF.x31 - SELF.x00*SELF.x22*SELF.x31 - SELF.x01*SELF.x20*SELF.x32 + SELF.x00*SELF.x21*SELF.x32) / d
        Matrix.x32(m) = (SELF.x02*SELF.x11*SELF.x30 - SELF.x01*SELF.x12*SELF.x30 - SELF.x02*SELF.x10*SELF.x31 + SELF.x00*SELF.x12*SELF.x31 + SELF.x01*SELF.x10*SELF.x32 - SELF.x00*SELF.x11*SELF.x32) / d
        Matrix.x33(m) = (SELF.x01*SELF.x12*SELF.x20 - SELF.x02*SELF.x11*SELF.x20 + SELF.x02*SELF.x10*SELF.x21 - SELF.x00*SELF.x12*SELF.x21 - SELF.x01*SELF.x10*SELF.x22 + SELF.x00*SELF.x11*SELF.x22) / d
        return m
    }
} @end