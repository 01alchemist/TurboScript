export class Texture {
    width: int32;
    height: int32;
    data: Array<Color>;

    constructor(width: int32, height: int32, data: Array<Color>) {
        this.width = width;
        this.height = height;
        this.data = data;
    }

    static createTexture(imgdata: Uint8Array, width: int32, height: int32): Texture {

        let data = new Array<Color>(width * height);
        let y = 0;
        let x = 0;

        while (y < height) {
            x = 0;
            while (x < width) {
                let i = (y * (width * 4)) + (x * 4);
                let index = y * width + x;
                let c = new Color(
                    (imgdata[i] / 255) as float64,
                    (imgdata[i + 1] / 255) as float64,
                    (imgdata[i + 2] / 255) as float64
                );
                data[index] = c.pow(2.2, c);
                x = x + 1;
            }
            y = y + 1;
        }

        return new Texture(width, height, data);
    }

    pow(a: float64): Texture {
        let i: int32 = 0;
        while(i < this.data.length) {
            let d = this.data[i];
            d.pow(a, d);
            i = i + 1;
        }
        return this;
    }

    mulScalar(a: float64): Texture {
        let i: int32 = 0;
        while(i < this.data.length) {
            let d = this.data[i];
            d.mulScalar(a, d);
            i = i + 1;
        }
        return this;
    }

    bilinearSample(u: float32, v: float32, c:Color = null): Color {
        c = c != null ? c : new Color();

        let w: number = this.width - 1;
        let h: number = this.height - 1;

        let _ = Utils.modf(u * w);

        let _x = _.int;
        let x = _.frac;
        _ = Utils.modf(v * h);
        let _y = _.int;
        let y = _.frac;

        let x0: number = _x;
        let y0: number = _y;
        let x1: number = x0 + 1;
        let y1: number = y0 + 1;
        let c00: Color = this.data[y0 * this.width + x0];
        let c01: Color = this.data[y1 * this.width + x0];
        let c10: Color = this.data[y0 * this.width + x1];
        let c11: Color = this.data[y1 * this.width + x1];

        let tmp = c00.mulScalar((1 - x) * (1 - y));

        c.add(tmp, c);
        c.add(c10.mulScalar(x * (1 - y), tmp), c);
        c.add(c01.mulScalar((1 - x) * y, tmp), c);
        c.add(c11.mulScalar(x * y, tmp), c);

        delete tmp;

        return c;
    }

    sample(u: float32, v: float32, c:Color): Color {
        u = Utils.fract(Utils.fract(u) + 1);
        v = Utils.fract(Utils.fract(v) + 1);
        return this.bilinearSample(u, 1 - v, c);
    }

    simpleSample(u: float32, v: float32): Color {
        u = Utils.fract(Utils.fract(u) + 1);
        v = Utils.fract(Utils.fract(v) + 1);
        v = 1 - v;
        let x = Math.round(u * this.width);
        let y = Math.round(v * this.height);
        return this.data[y * this.width + x];
    }

    normalSample(u: float32, v: float32, n: Vector3 = null): Vector3 {
        n = n != null ? n : new Vector3();
        let c = this.sample(u, v);
        n.set(c.r * 2 - 1, c.g * 2 - 1, c.b * 2 - 1).normalize(n);
        delete c;
        return n;
    }

    bumpSample(u: float32, v: float32, b: Vector3): Vector3 {
        b = b != null ? b : new Vector3();
        u = Utils.fractAddOne(u);
        v = Utils.fractAddOne(v);
        v = 1.0 - v;
        let x: int32 = (u * this.width) as int32;
        let y: int32 = (v * this.height) as int32;
        let x1 = Utils.clampInt(x - 1, 0, this.width - 1);
        let x2 = Utils.clampInt(x + 1, 0, this.width - 1);
        let y1 = Utils.clampInt(y - 1, 0, this.height - 1);
        let y2 = Utils.clampInt(y + 1, 0, this.height - 1);
        let cx = this.data[y * this.width + x1].sub(this.data[y * this.width + x2]);
        let cy = this.data[y1 * this.width + x].sub(this.data[y2 * this.width + x]);
        b.set(cx.r, cy.r, 0);
        delete cx;
        delete cy;
        return b;
    }

    //TODO: implement Pure JS exports
    // @JS
    // {
    //     static textures: any = [];
    //
    //     static getTexture(path: string): Texture {
    //
    //         let texture = Texture.textures[path];
    //         if (texture) {
    //             return texture;
    //         }
    //         texture = Texture.loadTexture(path);
    //         if (texture) {
    //             Texture.textures[path] = texture;
    //             return texture
    //         }
    //         return null;
    //     }
    //
    //     static loadTexture(path: string): Texture {
    //         console.log("Loading IMG: " + path);
    //         let img = Utils.LoadImage(path);
    //         return Texture.createTexture(img, img.width, img.height);
    //     }
    // }
}