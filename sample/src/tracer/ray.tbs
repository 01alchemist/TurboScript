export class Ray {

    origin: Vector3;
    direction: Vector3;

    constructor(origin: Vector3 = null, direction: Vector3 = null) {
        this.origin = origin == null ? new Vector3() : origin;
        this.direction = direction == null ? new Vector3() : direction;
    }

    set(origin: Vector3, direction: Vector3): Ray {
        this.origin = origin;
        this.direction = direction;
        return this;
    }

    position(t: float32, c: Vector3 = null): Vector3 {
        c = this.direction.mulScalar(t, c);
        return this.origin.add(c, c);
    }

    reflect(i: Ray, c: Ray = null): Ray {
        c = c != null ? c : new Ray();
        return c.set(this.origin/*.clone()*/, this.direction.reflect(i.direction));
    }

    refract(i: Ray, n1: number, n2: number, c: Ray = null): Ray {
        c = c != null ? c : new Ray();
        return c.set(this.origin/*.clone()*/, this.direction.refract(i.direction, n1, n2));
    }

    reflectance(i: Ray, n1: number, n2: number): float32 {
        return this.direction.reflectance(i.direction, n1, n2);
    }

    weightedBounce(u: float32, v: float32, c: Ray = null): Ray {
        c = c != null ? c : new Ray();
        let m1 = Math.sqrt(u);
        let m2 = Math.sqrt(1.0 - u);
        let a = v * 2.0 * PI;
        let q = new Vector3(u - 0.5, v - 0.5, u + v - 1.0);
        let s = this.direction.cross(q.normalize(q), q);
        let t = this.direction.cross(s);
        let d = new Vector3();

        d = d.add(s.mulScalar(m1 * Math.cos(a), s), d);
        d = d.add(t.mulScalar(m1 * Math.sin(a), t), d);
        d = d.add(this.direction.mulScalar(m2, s), d);

        delete s;
        delete t;

        return c.set(this.origin/*.clone()*/, d);
    }

    coneBounce(theta: float32, u: float32, v: float32, c: Ray = null): Ray {
        c = c != null ? c : new Ray();
        return c.set(this.origin/*.clone()*/, Utils.cone(this.direction, theta, u, v));
    }

    bounce(info: HitInfo, u: float32, v: float32, bounceType: BounceType): Bounce {
        let n: Ray = info.ray;
        let material = info.material;
        let n1 = 1.0;
        let n2 = material.index;
        let gloss = material.gloss;
        let transparent = material.transparent;

        if (info.inside) {
            let tmp = n1;
            n1 = n2;
            n2 = tmp;
        }

        let p: float32;

        if (material.reflectivity >= 0.0) {
            p = material.reflectivity;
        } else {
            p = n.reflectance(this, n1, n2);
        }

        let reflect: boolean;

        if (bounceType == BounceType.Any) {
            reflect = Math.random() < p;
        }
        else if (bounceType == BounceType.Diffuse) {
            reflect = false;
        }
        else if (bounceType == BounceType.Specular) {
            reflect = true;
        }

        if (reflect) {
            let reflected: Ray = n.reflect(this);
            return new Bounce(reflected.coneBounce(gloss, u, v), true, p);
        } else if (transparent) {
            let refracted: Ray = n.refract(this, n1, n2);
            refracted.origin = refracted.origin.add(refracted.direction.mulScalar(0.0001));
            return new Bounce(refracted.coneBounce(gloss, u, v), true, 1.0 - p);
        } else {
            return new Bounce(n.weightedBounce(u, v), false, 1.0 - p);
        }
    }
}