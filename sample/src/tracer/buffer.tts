export enum Channel{
	ColorChannel,
	VarianceChannel,
	StandardDeviationChannel
}

export class Pixel{

    samples:int32;
    M:Color;
    V:Color;

	static tmp:Color;
	
	constructor(samples:number=0, M:number=0, V:number=0):Pixel {
		Pixel.tmp = new Color();
        this.samples = samples;
        this.M = M;
        this.V = V;
        return this;
	}

	addSample(sample:Color):void {
		this.samples++;
		if (this.samples == 1) {
            this.M = sample;
			return;
		}
		this.M.clone(Pixel.tmp);
		let tmp2 = new Color();
		this.M.add(sample.sub(this.M, tmp2).divScalar(this.samples, tmp2), this.M);
		this.V.add(sample.sub(Pixel.tmp, tmp2).mul(sample.sub(this.M, tmp2), tmp2), this.V);
		delete tmp2;
	}

	color():Color {
		return this.M;
	}

	variance():Color {
		if (this.samples < 2) {
			return Color.BLACK;
		}
		return this.V.divScalar(this.samples - 1);
	}

    standardDeviation():Color {
		return this.variance().pow(0.5);
	}
}

export class Buffer{

    width:int32;
    height:int32;
    pixels:Array<Pixel>;

	constructor(width:int32, height:int32, pixels:Array<Pixel>):Buffer {
        this.width = width;
        this.height = height;
        this.pixels = pixels != null ? pixels : new Array<Pixel>(width * height);
        return this;
    }

    // static Copy(SELF):Buffer {
    //     let pixels = [];//thus.width*this.h
    //
    //     this.pixels.forEach((item) => {
    //         pixels.push(item);
    //     });
    //
    //     return new Buffer(this.width, this.height, pixels);
    // }

    addSample(SELF, x:number, y:number, sample:number) {
        this.pixels[y*this.width+x].addSample(sample);
    }

    samples(SELF, x:number, y:number):number {
        return this.pixels[y*this.width+x].samples;
    }

    color(SELF, x:number, y:number):number{
        return this.pixels[y*this.width+x].color();
    }

    variance(SELF, x:number, y:number):number {
        return this.pixels[y*this.width+x].variance();
    }

    standardDeviation(SELF, x:number, y:number):number {
        return this.pixels[y*this.width+x].standardDeviation();
    }

    image(SELF, channel:Channel):number {
        let result = Image.NewRGBA64(0, 0, this.width, this.height);
        for (let y = 0; y < this.height; y++) {
            for (let x = 0; x < this.width; x++) {
                var c:number;
                switch (channel) {
                    case Channel.ColorChannel:
                        c = this.pixels[y*this.width+x].color().pow(1 / 2.2);
                        break;
                    case Channel.VarianceChannel:
                        c = this.pixels[y*this.width+x].variance();
                        break;
                    case Channel.StandardDeviationChannel:
                        c = this.pixels[y*this.width+x].standardDeviation();
                        break;
                }
                result.setRGBA64(x, y, Color.RGBA64(c));
            }
        }
        return result
    }

}