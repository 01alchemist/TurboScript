import {Scene} from "../turbo/scene.tbs";
import {Color} from "./color3.tts";
import {Ray} from "./ray.tbs";
import {Hit} from "./hit.tbs";
import {Color} from "../turbo/color.tbs";
import {Sphere} from "../turbo/shapes/sphere.tbs";
import {ShapeType, Shape} from "../turbo/shapes/shape.tbs";
import {Vector3, randomUnitVector3} from "../turbo/vector3.tbs";
import {Box} from "../turbo/box.tbs";

export enum LightMode{
    LightModeRandom,
    LightModeAll
}
export enum SpecularMode{
    SpecularModeNaive,
    SpecularModeFirst,
    SpecularModeAll
}

export enum BounceType{
    BounceTypeAny,
    BounceTypeDiffuse,
    BounceTypeSpecular
}

class Bounce {
    ray: Ray;
    reflected: boolean;
    coefficient: float32;

    constructor(ray: Ray, reflected: boolean, coefficient: float32): Bounce {
        this.ray = ray;
        this.reflected = reflected;
        this.coefficient = coefficient;
        return this;
    }

}

export function newSampler(firstHitSamples, maxBounces): BaseSampler {
    return new BaseSampler(firstHitSamples, maxBounces, true, true, LightMode.LightModeRandom, SpecularMode.SpecularModeNaive);
}

export function newDirectSampler(): BaseSampler {
    return new BaseSampler(1, 0, true, false, LightMode.LightModeAll, SpecularMode.SpecularModeAll);
}

export class Sampler {

    static sample(sampler: BaseSampler, scene: number, ray: Ray): Color {
        return sampler.sample(scene, ray, true, sampler.firstHitSamples, 0)
    }
}

export class BaseSampler {

    public firstHitSamples: int32;
    public maxBounces: int32;
    public directLighting: boolean;
    public softShadows: boolean;
    public lightMode: LightMode;
    public specularMode: SpecularMode;

    constructor(firstHitSamples: int32, maxBounces: int32, directLighting: boolean, softShadows: boolean,
                lightMode: LightMode, specularMode: SpecularMode): BaseSampler {

        this.firstHitSamples = firstHitSamples;
        this.maxBounces = maxBounces;
        this.directLighting = directLighting;
        this.softShadows = softShadows;
        this.lightMode = lightMode;
        this.specularMode = specularMode;
        return this;
    }

    sample(scene: Scene, ray: Ray, emission: boolean, samples: int32, depth: int32): Color {
        if (depth > this.maxBounces) {
            return new Color();
        }
        let hit: Hit = scene.intersect(ray);
        if (!hit.ok()) {
            return this.sampleEnvironment(scene, ray);
        }
        let info = hit.info(ray);
        let material = info.material;
        let result: Color = new Color();
        if (material.emittance > 0.0) {
            if (this.directLighting && !emission) {
                return result;
            }
            let __f: float64 = material.emittance * samples;
            material.color.mulScalar(__f, result);
        }
        let n: float32 = Math.sqrt(samples);
        let ma: BounceType;
        let mb: BounceType;

        if (this.specularMode == SpecularMode.SpecularModeAll || (depth == 0 && this.specularMode == SpecularMode.SpecularModeFirst)) {
            ma = BounceType.BounceTypeDiffuse;
            mb = BounceType.BounceTypeSpecular;
        } else {
            ma = BounceType.BounceTypeAny;
            mb = BounceType.BounceTypeAny;
        }

        let u: int32 = 0;
        let v: int32 = 0;
        let mode: int32 = ma;


        while (u < n) {
            v = 0;
            while (v < n) {
                mode = ma;
                while (mode <= mb) {
                    let fu = (u + Math.random()) / n;
                    let fv = (v + Math.random()) / n;
                    let bounce = ray.bounce(info, fu, fv, mode);
                    if (mode == BounceType.BounceTypeAny) {
                        bounce.coefficient = 1.0
                    }
                    if (bounce.coefficient > 0.0 && bounce.reflected) {
                        // specular
                        let indirect: Color = this.sample(scene, bounce.ray, bounce.reflected, 1, depth + 1);
                        let xindirect: Color = material.color.mul(indirect);
                        let tinted: Color = indirect.mix(xindirect, material.tint, xindirect);
                        result.add(tinted.mulScalar(bounce.coefficient, tinted), result);

                        //TODO: Use local tmp colors and check if it is giving any performance improvements
                        delete indirect;
                        delete xindirect;

                    }
                    if (bounce.coefficient > 0.0 && !bounce.reflected) {
                        // diffuse
                        let indirect: Color = this.sample(scene, bounce.ray, bounce.reflected, 1, depth + 1);
                        let direct: Color = new Color();
                        if (this.directLighting) {
                            direct = this.sampleLights(scene, info.Ray);
                        }
                        result.add(material.color.mul(
                            direct.add(indirect, indirect), indirect
                        ).mulScalar(bounce.coefficient, indirect), result);

                        delete indirect;
                        delete direct;
                    }

                    mode = mode + 1;
                }
                v = v + 1;
            }
            u = u + 1;
        }
        return result.divScalar(n * n, result);
    }

    sampleEnvironment(scene: Scene, ray: Ray): Color {
        if (scene.texture != null) {
            let d: Vector3 = ray.direction;
            let u: float64 = Math.atan2(d.z, d.x) + scene.textureAngle;
            let v: float64 = Math.atan2(d.y, new Vector3(d.x, 0.0, d.z).length());
            u = (u + Math.PI) / (2 * Math.PI);
            v = (v + Math.PI / 2) / Math.PI;
            return scene.texture.sample(u, v);
        }
        return scene.color;
    }

    sampleLights(scene: Scene, n: Ray): Color {
        let nLights = scene.numLights;
        if (nLights == 0) {
            return new Color();
        }

        let lights = scene.lights;

        if (this.lightMode == LightMode.LightModeAll) {
            var result: Color = new Color();
            let i: int32 = 0;
            while (i < nLights) {
                let light = lights[i];
                result.add(this.sampleLight(scene, n, light), result);
                i = i + 1;
            }
            return result;
        } else {
            // pick a random light
            let rndLight: int32 = Math.round(Math.random() * (nLights - 1));
            let light = lights[rndLight];
            let lightColor = this.sampleLight(scene, n, light);
            return lightColor.mulScalar(nLights, lightColor);
        }
    }

    sampleLight(scene: Scene, n: Ray, light: Shape): Color {
        // get bounding sphere center and radius
        var center: Vector3 = new Vector3();
        var radius: float32;

        switch (light.type()) {
            case ShapeType.SPHERE:
                radius = (light as Sphere).radius;
                (light as Sphere).center.clone(center);
                break;

            default:
                // get bounding sphere from bounding box
                let box = light.boundingBox();
                radius = box.outerRadius();
                box.center(center);
                break;
        }

        // get random point in disk
        let point: Vector3 = center.clone();
        let l: Vector3 = new Vector3();
        let u: Vector3 = new Vector3();
        let v: Vector3 = new Vector3();
        let x: float64;
        let y: float64;

        if (this.softShadows) {

            while (true) {

                x = Math.random() * 2 - 1;
                y = Math.random() * 2 - 1;

                if (x * x + y * y <= 1) {

                    center.sub(n.origin, l).normalize(l);
                    l.cross(randomUnitVector3(u), u).normalize(u);
                    l.cross(u, v);
                    //point.set(0.0,0.0,0.0); //TODO: May be wrong, need test
                    point.add(u.mulScalar(x * radius, u), point);
                    point.add(v.mulScalar(y * radius, v), point);
                    point.add(center, point);
                    break;
                }

            }
        }

        // construct ray toward light point
        let ray = new Ray(n.origin, point.sub(n.origin, l).normalize(l));

        // get cosine term
        let diffuse = ray.direction.dot(n.direction);
        if (diffuse <= 0.0) {
            delete l;
            delete u;
            delete v;
            delete ray;
            return new Color();
        }

        // check for light visibility
        let hit = scene.intersect(ray);

        if (!hit.ok()) {
            delete l;
            delete u;
            delete v;
            delete ray;
            return new Color();
        }

        // get material properties from light
        let material = hit.shape.materialAt(point);
        let emittance = material.emittance;

        if (emittance == 0.0) {
            delete l;
            delete u;
            delete v;
            delete ray;
            return new Color();
        }

        // compute solid angle (hemisphere coverage)
        let hyp = center.sub(n.origin, u).length();
        let opp = radius;
        let theta = Math.asin(opp / hyp);
        let adj = opp / Math.tan(theta);
        let d = Math.cos(theta) * adj;
        let r = Math.sin(theta) * adj;
        let coverage = (r * r) / (d * d);

        // TODO: fix issue where hyp < opp (point inside sphere)
        if (hyp < opp) {
            coverage = 1.0
        }
        coverage = Math.min(coverage, 1.0);

        // combine factors
        let m = emittance * diffuse * coverage;
        delete l;
        delete u;
        delete v;
        delete ray;
        return material.color.mulScalar(m);
    }

}
