export class Intersection{
	tmin:float64;
	tmax:float64;

	constructor(tmin:float64, tmax:float64):Intersection{
		this.tmin = tmin;
		this.tmax = tmax;
	}

}

export class Hit{

	static NoHit:Hit = new Hit(null, Number.POSITIVE_INFINITY, null);

	constructor(public Shape:number, public T:number, public HitInfo:HitInfo=null){

	}

	Ok():boolean{
		return this.T < Number.POSITIVE_INFINITY;
	}

	Info(r:Ray){
		if(this.HitInfo != null){
			return this.HitInfo;
		}

		let shape:number = this.Shape;
		let position:Vector3 = r.position(this.T);
		let normal:Vector3 = Shape.NormalAt(this.Shape, position);
		let material:number = Material.MaterialAt(shape, position);
		let inside:boolean = false;

		if(normal.dot(r.direction) > 0){
			normal = normal.negate();
			inside = true;
			switch (Shape.Type(shape)) {
				case ShapeType.Volume:
				case ShapeType.SDFShape:
					inside = false;
					break;
			}
		}

		let ray = new Ray(position, normal);
		return new HitInfo(shape, position, normal, ray, material, inside);
	}
}

export class HitInfo{

	constructor(public Shape:number,
				public Position:Vector3,
                public Normal:Vector3,
                public Ray:Ray,
                public Material:number,
                public Inside:boolean){

	}
}