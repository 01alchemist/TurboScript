@turbo class Ray{

	Origin:Vector
	Direction:Vector

	@method init(SELF:number, origin:number, direction:number):number{
		SELF.Origin = origin;
		SELF.Direction = direction;
		return SELF;
	}

    static ToJSON(SELF){
        return {
            origin:Vector.XYZ(SELF.Origin),
            direction:Vector.XYZ(SELF.Direction)
        };
    }

	static Position(r:number, t:number):number{
		return Vector.Add_mem(Ray.Origin(r), Vector.MulScalar_mem(Ray.Direction(r), t));
	}

	static Reflect(n:number, i:number, r?:number):number{
		r = r?r:@new Ray;
		return Ray.init(r, Ray.Origin(n), Vector.Reflect_mem(Ray.Direction(n), Ray.Direction(i)) );
	}

    static Refract(n:number, i:number, n1:number, n2:number, r?:number):number{
        r = r?r:@new Ray;
        return Ray.init(r, Ray.Origin(n), Vector.Refract_mem(Ray.Direction(n), Ray.Direction(i), n1, n2) );
    }

    static Reflectance(n:number, i:number, n1:number, n2:number):number{
        return Vector.Reflectance_mem(Ray.Direction(n), Ray.Direction(i), n1, n2);
    }

    static WeightedBounce(r:number, u:number, v:number, c?:number):number{
        c = c?c:@new Ray;
        let radius:number = Math.sqrt(u);
        let theta:number = 2 * Math.PI * v;
        let s:number = Vector.Normalize_mem(Vector.Cross_mem(Ray.Direction(r), Vector.RandomUnitVector()));
        let t:number = Vector.Cross_mem(Ray.Direction(r), s);
        let d:number = @new Vector;
        Vector.Add_mem(d, Vector.MulScalar_mem(s, radius * Math.cos(theta)), d);
        Vector.Add_mem(d, Vector.MulScalar_mem(t, radius * Math.sin(theta)), d);
        Vector.Add_mem(d, Vector.MulScalar_mem(r, Math.sqrt(1 - u)), d);
        return Ray.init(c, Ray.Origin(r), d);
    }

    static ConeBounce(r:number, theta:number, u:number, v:number, c?:number):number{
        c = c?c:@new Ray;
        return Ray.init(c, Ray.Origin(r), Cone(Ray.Direction(r), theta, u, v));
    }

    static Bounce(i:number, info:HitInfo, u:number, v:number, bounceType:BounceType):{ray:number, reflected:boolean, coefficient:number} {
        let n = info.Ray;
        let material = info.Material;
        let n1 = 1.0;
        let n2 = Material.Index(material);

        if(info.Inside){
            let tmp = n1;
            n1 = n2;
            n2 = tmp;
        }

        let p:number;

        if(Material.Reflectivity(material) >= 0) {
            p = Material.Reflectivity(material);
        }else{
            p = Ray.Reflectance(n, i, n1, n2);
        }

        let reflect:boolean;

        switch (bounceType){
            case BounceType.Any:
                reflect = Math.random() < p;
                break;
            case BounceType.Diffuse:
                reflect = false;
                break;
            case BounceType.Specular:
                reflect = true;
                break;
        }
        if(reflect) {
            let reflected:number = Ray.Reflect(n, i);
            return { ray: Ray.ConeBounce(reflected, Material.Gloss(material), u, v), reflected:true, coefficient:p };
        } else if (Material.Transparent(material)) {
            let refracted:number = Ray.Refract(n, i, n1, n2);
            Ray.Origin(refracted) = Vector.Add(Ray.Origin(refracted), Vector.MulScalar(Ray.Direction(refracted), 1e-4));
            return { ray: Ray.ConeBounce(refracted, Material.Gloss(material), u, v), reflected: true, coefficient: 1 - p };
        } else {
            return { ray: Ray.WeightedBounce(n, u, v), reflected: false, coefficient: 1 - p };
        }
    }
} @end