declare class boolean {
toString(): string {
  return this ? "true" : "false";
}
}

declare class sbyte {
toString(): string {
  return (this as int32).toString();
}
}

declare class byte {
toString(): string {
  return (this as uint32).toString();
}
}

declare class short {
toString(): string {
  return (this as int32).toString();
}
}

declare class ushort {
toString(): string {
  return (this as uint32).toString();
}
}

declare class int32 {
  toString(): string {
    // Special-case this to keep the rest of the code simple
    if (this == -2147483648) {
      return "-2147483648";
    }

    // Treat this like an unsigned integer prefixed by '-' if it's negative
    return internalIntToString((this < 0 ? -this : this) as uint32, this < 0);
  }
}

declare class uint32 {
toString(): string {
  return internalIntToString(this, false);
}
}

declare class int64 {
toString(): string {
    return "Not implemented";
}
}

declare class uint64 {
toString(): string {
  return "Not implemented";
}
}

declare class float32 {
toString(): string {
    return "Not implemented";
}
}

declare class float64 {
toString(): string {
  return "Not implemented";
}
}

function internalIntToString(value: uint32, sign: boolean): string {
// Avoid allocation for common cases
if (value == 0) return "0";
if (value == 1) return sign ? "-1" : "1";

  // Determine how many digits we need
  var length = ((sign ? 1 : 0) + (
    value >= 100000000 ?
      value >= 1000000000 ? 10 : 9 :
    value >= 10000 ?
      value >= 1000000 ?
        value >= 10000000 ? 8 : 7 :
        value >= 100000 ? 6 : 5 :
      value >= 100 ?
        value >= 1000 ? 4 : 3 :
        value >= 10 ? 2 : 1)) as uint32;

  var ptr = string_new(length) as *byte;
  var end = ptr + 4 + length * 2;

  if (sign) {
    *((ptr + 4) as *ushort) = '-';
  }

  while (value != 0) {
    end = end + -2;
    *(end as *ushort) = (value % 10 + '0') as ushort;
    value = value / 10;
  }

  return ptr as string;
}

function string_new(length: uint32): string {
  var ptr = malloc(4 + length * 2);
  *(ptr as *uint32) = length;
  return ptr as string;
}

declare class string {
charAt(index: int32): string {
  return this.slice(index, index + 1);
}

charCodeAt(index: int32): ushort {
  return this[index];
}

get length(): int32 {
    return *(this as *int32);
}

operator [] (index: int32): ushort {
  if (index as uint32 < this.length as uint32) {
      return *((this as *byte + 4 + index * 2) as *ushort);
  }
  return 0;
}

operator == (other: string): boolean {
    if (this as *byte == other as *byte) return true;
    if (this as *byte == null || other as *byte == null) return false;
    var length = this.length;
    if (length != other.length) return false;
    return memcmp(this as *byte + 4, other as *byte + 4, length as uint32 * 2) == 0;
}

slice(start: int32, end: int32): string {
  var length = this.length;

  if (start < 0) start = start + length;
  if (end < 0) end = end + length;

  if (start < 0) start = 0;
  else if (start > length) start = length;

  if (end < start) end = start;
  else if (end > length) end = length;

    var range = (end - start) as uint32;
    var ptr = string_new(range);
    memcpy(ptr as *byte + 4, this as *byte + 4 + start * 2, range * 2);
    return ptr;
}

startsWith(text: string): boolean {
  var textLength = text.length;
  if (this.length < textLength) return false;
    return memcmp(this as *byte + 4, text as *byte + 4, textLength as uint32 * 2) == 0;
}

endsWith(text: string): boolean {
  var thisLength = this.length;
  var textLength = text.length;
  if (thisLength < textLength) return false;
    return memcmp(this as *byte + 4 + (thisLength - textLength) * 2, text as *byte + 4, textLength as uint32 * 2) == 0;
}

indexOf(text: string): int32 {
  var thisLength = this.length;
  var textLength = text.length;
  if (thisLength >= textLength) {
    var i = 0;
    while (i < thisLength - textLength) {
        if (memcmp(this as *byte + 4 + i * 2, text as *byte + 4, textLength as uint32 * 2) == 0) {
          return i;
        }
      i = i + 1;
    }
  }
  return -1;
}

lastIndexOf(text: string): int32 {
  var thisLength = this.length;
  var textLength = text.length;
  if (thisLength >= textLength) {
    var i = thisLength - textLength;
    while (i >= 0) {
        if (memcmp(this as *byte + 4 + i * 2, text as *byte + 4, textLength as uint32 * 2) == 0) {
          return i;
        }
      i = i - 1;
    }
  }
  return -1;
}
}