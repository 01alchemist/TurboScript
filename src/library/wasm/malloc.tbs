// These will be filled in by the WebAssembly code generator
var originalHeapPointer: *byte = null;
var currentHeapPointer: *byte = null;

var numFreeChunks: uint32 = 0;
var firstFree: uint32 = 0;
var lastFree: uint32 = 0;

const PREV_INUSE:uint32 = 1;
const IS_MMAPPED:uint32 = 2;
const NON_MAIN_ARENA:uint32 = 4;
const SIZE_BITS:uint32 = PREV_INUSE|IS_MMAPPED|NON_MAIN_ARENA;

//An allocated chunk looks like this:
/*
    chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if allocated            | |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk, in bytes                         |P|
      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             User data starts here...                          .
            .                                                               .
            .             (malloc_usable_size() bytes)                      .
            .                                                               |
nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk                                     |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
*/
//Free chunks are stored in circular doubly-linked lists, and look like this:
/*
    chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk                            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `head:' |             Size of chunk, in bytes                         |P|
      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Forward pointer to next chunk in list             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Back pointer to previous chunk in list            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Unused space (may be 0 bytes long)                .
            .                                                               .
            .                                                               |
nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `foot:' |             Size of chunk, in bytes                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
*/

@start
function init_malloc():void{
    numFreeChunks = 0;
    firstFree = 0;
    lastFree = 0;
}

export function malloc(nbytes: uint32): *byte {

    var alignment:uint32 = 8;

    if(numFreeChunks > 0){
        var freeChunk = findChunk(nbytes);
        if(freeChunk != null){
            numFreeChunks = numFreeChunks - 1;
            setInuse(freeChunk);
            return freeChunk;
        }
    }

    var offset = ((currentHeapPointer as uint32 + (alignment - 1)) & ~(alignment - 1) as uint32) as *byte;
    nbytes = (nbytes + (alignment - 1)) & ~(alignment - 1) as uint32;

    var chunkSize:uint32 = nbytes + 8;

    var top = offset + chunkSize;

    var ptr = offset + 4; //skip prev size
    setHeadSize(ptr, chunkSize);
    setInuse(ptr + 4);
    setFoot(ptr, chunkSize);

    currentHeapPointer = top + 4;

    offset = offset + 8;

    // Make sure the memory starts off at zero
    ptr = offset;
    while (ptr < top) {
      *(ptr as *uint32) = 0;
      ptr = ptr + 4;
    }

    return offset;
}
export function free(ptr:*byte):uint32{
    clearInuse(ptr);
    if(firstFree == 0){
        firstFree = ptr as uint32;
    }
    var chunkptr = ptr + 4;
    if(lastFree != 0){
        *(chunkptr as *uint32) = lastFree as uint32;//backward pointer to prev chunk
        *(lastFree as *uint32) = ptr as uint32;//forward pointer to next chunk of prev chunk
    }
    lastFree = ptr as uint32;
    numFreeChunks = numFreeChunks + 1;
    return lastFree;
}
function findChunk(nbytes: uint32):*byte{
    var chunk = firstFree as *byte;
    while(chunk != null){
        var ptr = (chunk as uint32) - 4;
        if(*(ptr as *uint32) == nbytes){
            return chunk;
        }
        chunk = *(chunk as *uint32) as *byte;
    }
    return null;
}
export function getHeapPtr(): uint32 {
    return currentHeapPointer as uint32;
}
export function getOriginalHeapPtr(): uint32 {
    return originalHeapPointer as uint32;
}
export function getNumFreeChunks():uint32{
    return numFreeChunks as uint32;
}
export function getFirstFree():uint32{
    return firstFree;
}
export function getLastFree():uint32{
    return lastFree;
}
export function prevFree(ptr:*byte):uint32{
    return  *(ptr + 4) as uint32;
}
export function nextFree(ptr:*byte):uint32{
    return *(ptr as *uint32) as uint32;
}
/* Set size at head, without disturbing its use bit */
function setHeadSize(ptr:*byte, s:uint32):void  {
    *(ptr as *uint32) = (*(ptr as *uint32) & SIZE_BITS) | s;
}

/* Set size/use field */
function setHead(ptr:*byte, s:uint32):void {
   *(ptr as *uint32) = s;
}

/* Set size at footer (only when chunk is not in use) */
function setFoot(ptr:*byte, s:uint32):void {
    var size = *(ptr as *uint32);
    var chunkptr = (ptr as uint32) + size;
    *(chunkptr as *uint32) = s;
}

export function getPrevInuse(ptr:*byte):uint32 {
    var chunkptr = (ptr as uint32) - 8;
    return *(chunkptr as *uint32) & (PREV_INUSE);
}
export function setInuse(ptr:*byte):uint32{
    var chunkptr = (ptr as uint32) - 4;
    *(chunkptr as *uint32) =  *(chunkptr as *uint32) | PREV_INUSE;
    return  *(chunkptr as *uint32);
}
export function getInuse(ptr:*byte):uint32{
    var chunkptr = (ptr as uint32) - 4;
    return *(chunkptr as *uint32) & (PREV_INUSE);
}
export function clearInuse(ptr:*byte):void{
    var chunkptr = (ptr as uint32) - 4;
    *(chunkptr as *uint32) = *(chunkptr as *uint32) & ~(PREV_INUSE);
}
export function chunksize(ptr:*byte):uint32{
    var chunkptr = (ptr as uint32) - 4;
    return *(chunkptr as *uint32) & ~(PREV_INUSE) as uint32;
}
/* malloc */
// var SIZE_SZ:uint32 = 4;
// var MALLOC_ALIGNMENT:uint32 = 8;//2 * SIZE_SZ;
// var MALLOC_ALIGN_MASK:uint32 = MALLOC_ALIGNMENT - 1;
//
// var PREV_INUSE:uint32 = 0x1;
// var IS_MMAPPED:uint32 = 0x2;
// var NON_MAIN_ARENA:uint32 = 0x4;
// var SIZE_BITS:uint32 = PREV_INUSE|IS_MMAPPED|NON_MAIN_ARENA;
//
// class chunk{
//     prevSize:uint32;
//     size:uint32;
//     forward:uint32;
//     backward:uint32;
//     forwardLarge:uint32;
//     backwardLarge:uint32;
// }
// function prev_inuse(p:*chunk):uint32 {
//     return (p as chunk).size & PREV_INUSE;
// }
// function chunksize(p:*chunk):uint32 {
//     return (p as chunk).size & ~(SIZE_BITS);
// }
// /* Ptr to next physical malloc_chunk. */
// function next_chunk(p:*chunk):*chunk {
//     ((*p as uint32) + (p as chunk).size & ~(SIZE_BITS)) as *chunk;
// }
//
// /* Ptr to previous physical malloc_chunk */
// function prev_chunk(p:*chunk):*chunk {
//     ((*p as uint32) - (p as chunk).prevSize) as *chunk;
// }
//
// /* Treat space at ptr + offset as a chunk */
// function chunk_at_offset(p:*chunk, s:uint32):*chunk{
//     return ((*p as uint32) + s) as *chunk;
// }
//
// /* extract p's inuse bit */
// function inuse(p:*chunk):uint32{
//  return ((*p as uint32) + (((p as chunk).size & ~SIZE_BITS) as chunk).size) & PREV_INUSE;
// }
//
// /* set/clear chunk as being inuse without otherwise disturbing */
// function set_inuse(p:*chunk):uint32{
//  return ((*p as uint32) + (((p as chunk).size & ~SIZE_BITS) as chunk).size) = ((*p as uint32) + (((p as chunk).size & ~SIZE_BITS) as chunk).size) | PREV_INUSE;
// }
//
// function clear_inuse(p:*chunk):uint32{
//  return ((*p as uint32) + (((p as chunk).size & ~SIZE_BITS) as chunk).size) = ((*p as uint32) + (((p as chunk).size & ~SIZE_BITS) as chunk).size) & ~(PREV_INUSE);
// }

function memcpy(target: *byte, source: *byte, length: uint32): void {
    // No-op if either of the inputs are null
    if (source == null || target == null) {
      return;
    }

    // Optimized aligned copy
    if (length >= 16 && (source as uint32) % 4 == (target as uint32) % 4) {
      // Pick off the beginning
      while ((target as uint32) % 4 != 0) {
        *target = *source;
        target = target + 1;
        source = source + 1;
        length = length - 1;
      }

      // Pick off the end
      while (length % 4 != 0) {
        length = length - 1;
        *(target + length) = *(source + length);
      }

      // Zip over the middle
      var end = target + length;
      while (target < end) {
        *(target as *int32) = *(source as *int32);
        target = target + 4;
        source = source + 4;
      }
    }

    // Slow unaligned copy
    else {
      var end = target + length;
      while (target < end) {
        *target = *source;
        target = target + 1;
        source = source + 1;
      }
    }
}

function memcmp(a: *byte, b: *byte, length: uint32): int32 {
    // No-op if either of the inputs are null
    if (a == null || b == null) {
      return 0;
    }

    // Return the first non-zero difference
    while (length > 0) {
      var delta = *a as int32 - *b as int32;
      if (delta != 0) {
        return delta;
      }
      a = a + 1;
      b = b + 1;
      length = length - 1;
    }

    // Both inputs are identical
    return 0;
}