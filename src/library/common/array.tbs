class Array<T> {

    bytesLength: int32;
    elementSize: int32;

    constructor(bytesLength: int32, elementSize: int32) {
        this.bytesLength = bytesLength;
        this.elementSize = elementSize;
    }

    operator [] (index: int32): T {
        let stripe = index * this.elementSize;
        if (stripe >= 0 && stripe < this.bytesLength) {
            return *((this as *uint8 + 8 + stripe) as *T);
        }
        return null as T;
    }

    operator []= (index: int32, value: T): void {
        let stripe = index * this.elementSize;
        if (stripe >= 0 && stripe < this.bytesLength) {
            *((this as *uint8 + 8 + stripe) as *T) = value;
        }
    }

    get length(): int32 {
        return this.bytesLength / this.elementSize;
    }
}

//declare type Int32Array   = Array< int32 >
//declare type Uint32Array  = Array< uint32 >
//declare type Int64Array   = Array< int64 >
//declare type Uint64Array  = Array< uint64 >
//declare type Float32Array = Array< float32 >
//declare type Float64Array = Array< float64 >
