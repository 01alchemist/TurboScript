/*class Float64Array {

    length: int32;
    bytesLength: int32;

    constructor(elementSize: int32) {
        this.length = elementSize;
        this.bytesLength = elementSize * 8;
    }

    // sort():void {
    //     foreign.sort(this as *int32, this.length, typeof T);
    // }

    // sort(items:Array<T>, left:int32, right:int32):Array<T> {
    //
    //     let index:int32;
    //
    //     if (items.length > 1) {
    //
    //         right = right == -1 ? items.length - 1 : right;
    //
    //         index = this.partition(items, left, right);
    //
    //         if (left < index - 1) {
    //             this.sort(items, left, index - 1);
    //         }
    //
    //         if (index < right) {
    //             this.sort(items, index, right);
    //         }
    //
    //     }
    //
    //     return items;
    // }
    //
    // swap(items:Array<T>, firstIndex:int32, secondIndex:int32):void{
    //     let temp = items[firstIndex];
    //     items[firstIndex] = items[secondIndex];
    //     items[secondIndex] = temp;
    // }
    //
    // partition(items:Array<T>, left:int32, right:int32):int32 {
    //
    //     let pivot   = items[Math.floor(((right + left) / 2) as float32) as int32],
    //         i       = left,
    //         j       = right;
    //
    //     while (i <= j) {
    //
    //         while (items[i] < pivot) {
    //             i++;
    //         }
    //
    //         while (items[j] > pivot) {
    //             j--;
    //         }
    //
    //         if (i <= j) {
    //             this.swap(items, i, j);
    //             i++;
    //             j--;
    //         }
    //     }
    //
    //     return i;
    // }

    operator [] (index: int32): float64 {
        if (index < this.length) {
            return *((this as *int32 + 8 + index * 8) as *float64) as float64;
        }
        return 0.0 as float64;
    }
    operator []= (index: int32, value:float64):void {
        *((this as *int32 + 8 + index * 8) as *float64) = value;
    }
}*/

export class Float64Array {

    elementSize: int32;
    bytesLength: int32;

    constructor(length: int32) {
        this.elementSize = 8;
        this.bytesLength = length * this.elementSize;
    }

    get length(): int32 {
        return this.bytesLength / this.elementSize;
    }

    operator [] (index: int32): float64 {
        let stripe = index * this.elementSize;
        if (stripe >= 0 && stripe < this.bytesLength) {
            return *((this as *int8 + 8 + stripe) as *float64);
        }
        return NaN as float64;
    }

    operator []= (index: int32, value: float64): void {
        let stripe = index * this.elementSize;
        if (stripe >= 0 && stripe < this.bytesLength) {
            *((this as *int8 + 8 + stripe) as *float64) = value;
        }
    }
}
