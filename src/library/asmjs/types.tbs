declare class boolean {
    toString(): string;
}

declare class sbyte {
    toString(): string;
}

declare class byte {
    toString(): string;
}

declare class short {
    toString(): string;
}

declare class ushort {
    toString(): string;
}

declare class int32 {
    toString(): string;
}

declare class uint32 {
    toString(): string;
}

declare class int64 {
    toString(): string;
}

declare class uint64 {
    toString(): string;
}

declare class float32 {
    toString(): string;
}

declare class float64 {
    toString(): string;
}

// declare class Math {
//     static abs(x: float64): float64;
//     static acos(x: float64): float64;
//     static asin(x: float64): float64;
//     static atan(x: float64): float64;
//     static atan2(y: float64, x: float64): float64;
//     static ceil(x: float64): float64;
//     static cos(x: float64): float64;
//     static exp(x: float64): float64;
//     static floor(x: float64): float64;
//     static log(x: float64): float64;
//     // static max(...values: float64[]): float64;
//     static max(a: float64, b:float64): float64;
//     // static min(...values: float64[]): float64;
//     static min(a: float64, b:float64): float64;
//     static pow(x: float64, y: float64): float64;
//     static random(): float64;
//     static round(x: float64): float64;
//     static sin(x: float64): float64;
//     static sqrt(x: float64): float64;
//     static tan(x: float64): float64;
// }

declare class string {
    charAt(index: int32): string;
    charCodeAt(index: int32): ushort;
    get length(): int32;
    indexOf(text: string): int32;
    lastIndexOf(text: string): int32;
    operator == (other: string): boolean;
    // operator [] (index: int32): ushort { return this.charCodeAt(index); }
    slice(start: int32, end: int32): string;

    // startsWith(text: string): boolean { return this.slice(0, text.length) == text; }
    // endsWith(text: string): boolean { return this.slice(-text.length, this.length) == text; }
}

export class Array<T> {
    pointer:int32;
    bytesLength:int32;
    elementSize:int32;
    // operator [] (index: int32): T;
    constructor(length:int32):Array {
        this.bytesLength = length;
        // this.pointer = malloc(length);
        return this;
    }
}